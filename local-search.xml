<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【Spring源码学习】简介</title>
    <link href="/2023/04/30/%E3%80%90Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/04/30/%E3%80%90Spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、为什么要学习Spring源码"><a href="#一、为什么要学习Spring源码" class="headerlink" title="一、为什么要学习Spring源码"></a>一、为什么要学习Spring源码</h1><ul><li>学习大神优秀的思想和代码风格</li><li>面试专业吹牛逼的法宝</li><li>写出更加优秀的代码</li></ul><h1 id="二、怎样学习源码"><a href="#二、怎样学习源码" class="headerlink" title="二、怎样学习源码"></a>二、怎样学习源码</h1><ul><li>java基础需要过硬</li><li>跟着demo跟代码</li><li>记录每个知识点，方便以后查阅和修正</li><li>注释关键点代码</li><li>有规律的复习</li><li>反复Do Exercise(不断练习)-&gt;Learning(由浅到深，由窄到宽)-&gt;Trying(尝试自己去实现)-&gt;Teaching(把自己理解的讲给别人听，查漏补缺，互相进步)</li></ul><h1 id="三、搭建Spring-Demo项目"><a href="#三、搭建Spring-Demo项目" class="headerlink" title="三、搭建Spring-Demo项目"></a>三、搭建Spring-Demo项目</h1><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><ul><li>JDK8</li><li>Spring5.2.8Release</li><li>Idea</li><li>Maven</li></ul><h2 id="2-pom依赖导入"><a href="#2-pom依赖导入" class="headerlink" title="2.pom依赖导入"></a>2.pom依赖导入</h2><p>最最核心的spring依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然还需要其他的辅助，比如测试、日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-spring-xml"><a href="#3-spring-xml" class="headerlink" title="3.spring.xml"></a>3.spring.xml</h2><p>Spring核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">    http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">default-lazy-init</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--自定义标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.enjoy.jack&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:application.properties&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>其中最重要namespace为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br>http://www.springframework.org/schema/context<br>http://www.springframework.org/schema/context/spring-context.xsd<br></code></pre></td></tr></table></figure><h1 id="四、Spring容器加载方式"><a href="#四、Spring容器加载方式" class="headerlink" title="四、Spring容器加载方式"></a>四、Spring容器加载方式</h1><ul><li>类路径获取配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>文件系统路径获取配置文件【绝对路径】<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileSystemXmlApplicationContext</span>(<span class="hljs-string">&quot;E:\com\public\springdemo\src\main\resources\spring.xml&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>无配置文件加载容器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(<span class="hljs-string">&quot;com.xx.jack&quot;</span>);<br></code></pre></td></tr></table></figure></li><li>Springboot加载容器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EmbeddedWebApplicationContext</span>();<br></code></pre></td></tr></table></figure></li></ul><p>后续Spring源码跟进，我主要以ClassPathXmlApplicationContext的方式。</p>]]></content>
    
    
    
    <tags>
      
      <tag>源码</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】Spring集成MyBatis的原理分析</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Spring%E9%9B%86%E6%88%90Mybatis%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Spring%E9%9B%86%E6%88%90Mybatis%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一章中<a href="https://zyxelva.github.io/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Spring%E9%9B%86%E6%88%90Mybatis%E7%9A%84%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/">【MyBatis源码学习】MyBatis与Spring整合</a>，我们介绍了Mybatis与Spring、Spring Boot的融合，其中我们提到了mybatis-spring中的几个关键类，本章我们来跟踪下这几个关键类的源码，看看它们干了些啥.</p><h1 id="一、源码下载"><a href="#一、源码下载" class="headerlink" title="一、源码下载"></a>一、源码下载</h1><p>和mybatis源码下载一样，从GitHub下载好后，本地打包部署一下，方便我们后面进行测试时方便查看。源码地址：<a href="https://github.com/mybatis/spring">这里是MyBatis-Spring源码地址</a>.</p><h1 id="二、核心类源码解析"><a href="#二、核心类源码解析" class="headerlink" title="二、核心类源码解析"></a>二、核心类源码解析</h1><p>先来回顾下核心类的功能：</p><ul><li>SqlSessionFactoryBean：用于创建SqlSessionFactory；</li><li>MapperScannerConfigurer：自动扫描所有的 Mapper 接口，使用时可以直接注入接口。</li></ul><h2 id="1-SqlSessionFactoryBean"><a href="#1-SqlSessionFactoryBean" class="headerlink" title="1.SqlSessionFactoryBean"></a>1.SqlSessionFactoryBean</h2><p>(1) UML<br><img src="https://img-blog.csdnimg.cn/20210324100712686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>(2) 配置和源码解析<br>通常我们在项目中整合Spring和mybatis时，Spring相关的配置文件会包含：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.entity&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlmapper/*.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>并且dataSource必须配置，我们可以从方法afterPropertiesSet()看出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 在spring容器中创建全局唯一的sqlSessionFactory</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception 异常</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//数据源不能为空</span><br>    notNull(dataSource, <span class="hljs-string">&quot;Property &#x27;dataSource&#x27; is required&quot;</span>);<br>    <span class="hljs-comment">//sqlSessionFactoryBuilder不能为空，但初始化SqlSessionFactoryBean完，sqlSessionFactoryBuilder已经创建了</span><br>    notNull(sqlSessionFactoryBuilder, <span class="hljs-string">&quot;Property &#x27;sqlSessionFactoryBuilder&#x27; is required&quot;</span>);<br>    state((configuration == <span class="hljs-literal">null</span> &amp;&amp; configLocation == <span class="hljs-literal">null</span>) || !(configuration != <span class="hljs-literal">null</span> &amp;&amp; configLocation != <span class="hljs-literal">null</span>),<br>              <span class="hljs-string">&quot;Property &#x27;configuration&#x27; and &#x27;configLocation&#x27; can not specified with together&quot;</span>);<br><br>    <span class="hljs-built_in">this</span>.sqlSessionFactory = buildSqlSessionFactory();<br>  &#125;<br></code></pre></td></tr></table></figure><p>接下来，看看方法。主要功能构建和丰富Configuration，并创建sqlSessionFactory.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Build a &#123;<span class="hljs-doctag">@code</span> SqlSessionFactory&#125; instance.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * The default implementation uses the standard MyBatis &#123;<span class="hljs-doctag">@code</span> XMLConfigBuilder&#125; API to build a</span><br><span class="hljs-comment">   * &#123;<span class="hljs-doctag">@code</span> SqlSessionFactory&#125; instance based on an Reader.</span><br><span class="hljs-comment">   * Since 1.3.0, it can be specified a &#123;<span class="hljs-doctag">@link</span> Configuration&#125; instance directly(without config file).</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> SqlSessionFactory</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> IOException if loading the config file failed</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">protected</span> SqlSessionFactory <span class="hljs-title function_">buildSqlSessionFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    Configuration configuration;<br>    <span class="hljs-type">XMLConfigBuilder</span> <span class="hljs-variable">xmlConfigBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//如果configuration不为空，则使用该对象，并对其进行配置</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.configuration != <span class="hljs-literal">null</span>) &#123;<br>      configuration = <span class="hljs-built_in">this</span>.configuration;<br>      <span class="hljs-keyword">if</span> (configuration.getVariables() == <span class="hljs-literal">null</span>) &#123;<br>        configuration.setVariables(<span class="hljs-built_in">this</span>.configurationProperties);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.configurationProperties != <span class="hljs-literal">null</span>) &#123;<br>        configuration.getVariables().putAll(<span class="hljs-built_in">this</span>.configurationProperties);<br>      &#125;<br>      <span class="hljs-comment">//创建xmlConfigBuilder，读取mybatis的核心配置文件</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.configLocation != <span class="hljs-literal">null</span>) &#123;<br>      xmlConfigBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLConfigBuilder</span>(<span class="hljs-built_in">this</span>.configLocation.getInputStream(), <span class="hljs-literal">null</span>, <span class="hljs-built_in">this</span>.configurationProperties);<br>      configuration = xmlConfigBuilder.getConfiguration();<br>      <span class="hljs-comment">//如果configuration为空，实例化一个configuration对象</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;Property &#x27;configuration&#x27; or &#x27;configLocation&#x27; not specified, using default MyBatis Configuration&quot;</span>);<br>      &#125;<br>      configuration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>();<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.configurationProperties != <span class="hljs-literal">null</span>) &#123;<br>        configuration.setVariables(<span class="hljs-built_in">this</span>.configurationProperties);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//设置objectFactory</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.objectFactory != <span class="hljs-literal">null</span>) &#123;<br>      configuration.setObjectFactory(<span class="hljs-built_in">this</span>.objectFactory);<br>    &#125;<br>    <span class="hljs-comment">//设置objectWrapperFactory</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.objectWrapperFactory != <span class="hljs-literal">null</span>) &#123;<br>      configuration.setObjectWrapperFactory(<span class="hljs-built_in">this</span>.objectWrapperFactory);<br>    &#125;<br>    <span class="hljs-comment">//设置vfs</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.vfs != <span class="hljs-literal">null</span>) &#123;<br>      configuration.setVfsImpl(<span class="hljs-built_in">this</span>.vfs);<br>    &#125;<br>    <span class="hljs-comment">//扫描指定的包typeAliasesPackage，注册别名</span><br>    <span class="hljs-keyword">if</span> (hasLength(<span class="hljs-built_in">this</span>.typeAliasesPackage)) &#123;<br>      String[] typeAliasPackageArray = tokenizeToStringArray(<span class="hljs-built_in">this</span>.typeAliasesPackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);<br>      <span class="hljs-keyword">for</span> (String packageToScan : typeAliasPackageArray) &#123;<br>        configuration.getTypeAliasRegistry().registerAliases(packageToScan, typeAliasesSuperType == <span class="hljs-literal">null</span> ? Object.class : typeAliasesSuperType);<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Scanned package: &#x27;&quot;</span> + packageToScan + <span class="hljs-string">&quot;&#x27; for aliases&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//为typeAliases指定的类注册别名</span><br>    <span class="hljs-keyword">if</span> (!isEmpty(<span class="hljs-built_in">this</span>.typeAliases)) &#123;<br>      <span class="hljs-keyword">for</span> (Class&lt;?&gt; typeAlias : <span class="hljs-built_in">this</span>.typeAliases) &#123;<br>        configuration.getTypeAliasRegistry().registerAlias(typeAlias);<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Registered type alias: &#x27;&quot;</span> + typeAlias + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//注册插件</span><br>    <span class="hljs-keyword">if</span> (!isEmpty(<span class="hljs-built_in">this</span>.plugins)) &#123;<br>      <span class="hljs-keyword">for</span> (Interceptor plugin : <span class="hljs-built_in">this</span>.plugins) &#123;<br>        configuration.addInterceptor(plugin);<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Registered plugin: &#x27;&quot;</span> + plugin + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//扫描指定的包typeHandlersPackage，注册类型解析器</span><br>    <span class="hljs-keyword">if</span> (hasLength(<span class="hljs-built_in">this</span>.typeHandlersPackage)) &#123;<br>      String[] typeHandlersPackageArray = tokenizeToStringArray(<span class="hljs-built_in">this</span>.typeHandlersPackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);<br>      <span class="hljs-keyword">for</span> (String packageToScan : typeHandlersPackageArray) &#123;<br>        configuration.getTypeHandlerRegistry().register(packageToScan);<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Scanned package: &#x27;&quot;</span> + packageToScan + <span class="hljs-string">&quot;&#x27; for type handlers&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//为typeHandlers指定的类注册类型解析器</span><br>    <span class="hljs-keyword">if</span> (!isEmpty(<span class="hljs-built_in">this</span>.typeHandlers)) &#123;<br>      <span class="hljs-keyword">for</span> (TypeHandler&lt;?&gt; typeHandler : <span class="hljs-built_in">this</span>.typeHandlers) &#123;<br>        configuration.getTypeHandlerRegistry().register(typeHandler);<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Registered type handler: &#x27;&quot;</span> + typeHandler + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//配置databaseIdProvider</span><br>    <span class="hljs-comment">//fix #64 set databaseId before parse mapper xmls</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.databaseIdProvider != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        configuration.setDatabaseId(<span class="hljs-built_in">this</span>.databaseIdProvider.getDatabaseId(<span class="hljs-built_in">this</span>.dataSource));<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedIOException</span>(<span class="hljs-string">&quot;Failed getting a databaseId&quot;</span>, e);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//配置缓存</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cache != <span class="hljs-literal">null</span>) &#123;<br>      configuration.addCache(<span class="hljs-built_in">this</span>.cache);<br>    &#125;<br>    <span class="hljs-comment">//使用xmlConfigBuilder读取mybatis的核心配置文件</span><br>    <span class="hljs-keyword">if</span> (xmlConfigBuilder != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        xmlConfigBuilder.parse();<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Parsed configuration file: &#x27;&quot;</span> + <span class="hljs-built_in">this</span>.configLocation + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedIOException</span>(<span class="hljs-string">&quot;Failed to parse config resource: &quot;</span> + <span class="hljs-built_in">this</span>.configLocation, ex);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        ErrorContext.instance().reset();<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//默认使用SpringManagedTransactionFactory作为事务管理器</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.transactionFactory == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.transactionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringManagedTransactionFactory</span>();<br>    &#125;<br>    <span class="hljs-comment">//设置Environment</span><br>    configuration.setEnvironment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Environment</span>(<span class="hljs-built_in">this</span>.environment, <span class="hljs-built_in">this</span>.transactionFactory, <span class="hljs-built_in">this</span>.dataSource));<br>    <span class="hljs-comment">//根据mapperLocations的配置，处理映射配置文件以及相应的mapper接口</span><br>    <span class="hljs-keyword">if</span> (!isEmpty(<span class="hljs-built_in">this</span>.mapperLocations)) &#123;<br>      <span class="hljs-keyword">for</span> (Resource mapperLocation : <span class="hljs-built_in">this</span>.mapperLocations) &#123;<br>        <span class="hljs-keyword">if</span> (mapperLocation == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">XMLMapperBuilder</span> <span class="hljs-variable">xmlMapperBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperBuilder</span>(mapperLocation.getInputStream(), configuration, mapperLocation.toString(), configuration.getSqlFragments());<br>          xmlMapperBuilder.parse();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedIOException</span>(<span class="hljs-string">&quot;Failed to parse mapping resource: &#x27;&quot;</span> + mapperLocation + <span class="hljs-string">&quot;&#x27;&quot;</span>, e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          ErrorContext.instance().reset();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>          LOGGER.debug(<span class="hljs-string">&quot;Parsed mapper file: &#x27;&quot;</span> + mapperLocation + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (LOGGER.isDebugEnabled()) &#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;Property &#x27;mapperLocations&#x27; was not specified or no matching resources found&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//最终使用sqlSessionFactoryBuilder创建sqlSessionFactory</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sqlSessionFactoryBuilder.build(configuration);<br>  &#125;<br></code></pre></td></tr></table></figure><p>最后一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sqlSessionFactoryBuilder.build(configuration);<br></code></pre></td></tr></table></figure><p>是不是又回到了熟悉的地方。</p><h2 id="2-MapperScannerConfigurer"><a href="#2-MapperScannerConfigurer" class="headerlink" title="2.MapperScannerConfigurer"></a>2.MapperScannerConfigurer</h2><p>(1) UML<br><img src="https://img-blog.csdnimg.cn/20210324140422191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>(2) 配置和源码解析<br>这里我们主要关注这个接口：BeanDefinitionRegistryPostProcessor<br>MapperScannerConfigurer实现了BeanDefinitionRegistryPostProcessor接口，BeanDefinitionRegistryPostProcessor接口是一个可以修改spring工厂中已定义的bean的接口，该接口有个postProcessBeanDefinitionRegistry方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>  <span class="hljs-comment">//占位符处理</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.processPropertyPlaceHolders) &#123;<br>    processPropertyPlaceHolders();<br>  &#125;<br>  <span class="hljs-comment">//实例化ClassPathMapperScanner，并对scanner相关属性进行配置</span><br>  <span class="hljs-type">ClassPathMapperScanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathMapperScanner</span>(registry);<br>  scanner.setAddToConfig(<span class="hljs-built_in">this</span>.addToConfig);<br>  scanner.setAnnotationClass(<span class="hljs-built_in">this</span>.annotationClass);<br>  scanner.setMarkerInterface(<span class="hljs-built_in">this</span>.markerInterface);<br>  scanner.setSqlSessionFactory(<span class="hljs-built_in">this</span>.sqlSessionFactory);<br>  scanner.setSqlSessionTemplate(<span class="hljs-built_in">this</span>.sqlSessionTemplate);<br>  scanner.setSqlSessionFactoryBeanName(<span class="hljs-built_in">this</span>.sqlSessionFactoryBeanName);<br>  scanner.setSqlSessionTemplateBeanName(<span class="hljs-built_in">this</span>.sqlSessionTemplateBeanName);<br>  scanner.setResourceLoader(<span class="hljs-built_in">this</span>.applicationContext);<br>  scanner.setBeanNameGenerator(<span class="hljs-built_in">this</span>.nameGenerator);<br>  <span class="hljs-comment">//根据上述配置，生成过滤器，只扫描合条件的class</span><br>  scanner.registerFilters();<br>  <span class="hljs-comment">//扫描指定的包以及其子包</span><br>  scanner.scan(StringUtils.tokenizeToStringArray(<span class="hljs-built_in">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));<br>&#125;<br></code></pre></td></tr></table></figure><p>点进去，看看ClassPathMapperScanner.scan()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Calls the parent search that will search and register all the candidates.</span><br><span class="hljs-comment"> * Then the registered objects are post processed to set them as</span><br><span class="hljs-comment"> * MapperFactoryBeans</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title function_">doScan</span><span class="hljs-params">(String... basePackages)</span> &#123;<br>    <span class="hljs-comment">//通过父类ClassPathBeanDefinitionScanner的扫描，获取所有复合条件的BeanDefinitionHolder对象</span><br>    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="hljs-built_in">super</span>.doScan(basePackages);<br>    <span class="hljs-keyword">if</span> (beanDefinitions.isEmpty()) &#123;<br>        logger.warn(<span class="hljs-string">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages) + <span class="hljs-string">&quot;&#x27; package. Please check your configuration.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//处理扫描得到的BeanDefinitionHolder集合，将集合中的每一个mapper接口转换成MapperFactoryBean后，注册至spring容器</span><br>        processBeanDefinitions(beanDefinitions);<br>    &#125;<br>    <span class="hljs-keyword">return</span> beanDefinitions;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理扫描得到的BeanDefinitionHolder集合，将集合中的每一个mapper接口转换成MapperFactoryBean后，注册至spring容器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> beanDefinitions</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBeanDefinitions</span><span class="hljs-params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> &#123;<br>    GenericBeanDefinition definition;<br>    <span class="hljs-comment">//遍历集合</span><br>    <span class="hljs-keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;<br>        definition = (GenericBeanDefinition) holder.getBeanDefinition();<br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Creating MapperFactoryBean with name &#x27;&quot;</span> + holder.getBeanName()<br>                    + <span class="hljs-string">&quot;&#x27; and &#x27;&quot;</span> + definition.getBeanClassName() + <span class="hljs-string">&quot;&#x27; mapperInterface&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// the mapper interface is the original class of the bean</span><br>        <span class="hljs-comment">// but, the actual class of the bean is MapperFactoryBean</span><br>        <span class="hljs-comment">//增加一个构造方法，接口类型作为构造函数的入参</span><br>        definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName());<br>        <span class="hljs-comment">//将bean的类型转换成mapperFactoryBean</span><br>        definition.setBeanClass(<span class="hljs-built_in">this</span>.mapperFactoryBean.getClass());<br>        <span class="hljs-comment">//增加addToConfig属性</span><br>        definition.getPropertyValues().add(<span class="hljs-string">&quot;addToConfig&quot;</span>, <span class="hljs-built_in">this</span>.addToConfig);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">explicitFactoryUsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//增加sqlSessionFactory属性</span><br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-built_in">this</span>.sqlSessionFactoryBeanName)) &#123;<br>            definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeBeanReference</span>(<span class="hljs-built_in">this</span>.sqlSessionFactoryBeanName));<br>            explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sqlSessionFactory != <span class="hljs-literal">null</span>) &#123;<br>            definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>, <span class="hljs-built_in">this</span>.sqlSessionFactory);<br>            explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//增加sqlSessionTemplate属性</span><br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-built_in">this</span>.sqlSessionTemplateBeanName)) &#123;<br>            <span class="hljs-keyword">if</span> (explicitFactoryUsed) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;</span>);<br>            &#125;<br>            definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionTemplate&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeBeanReference</span>(<span class="hljs-built_in">this</span>.sqlSessionTemplateBeanName));<br>            explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sqlSessionTemplate != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (explicitFactoryUsed) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;</span>);<br>            &#125;<br>            definition.getPropertyValues().add(<span class="hljs-string">&quot;sqlSessionTemplate&quot;</span>, <span class="hljs-built_in">this</span>.sqlSessionTemplate);<br>            explicitFactoryUsed = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//修改自动注入的方式 bytype</span><br>        <span class="hljs-keyword">if</span> (!explicitFactoryUsed) &#123;<br>            <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>                logger.debug(<span class="hljs-string">&quot;Enabling autowire by type for MapperFactoryBean with name &#x27;&quot;</span> + holder.getBeanName() + <span class="hljs-string">&quot;&#x27;.&quot;</span>);<br>            &#125;<br>            definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释已经写得很清楚了，这里再看看MapperFactoryBean.<br><img src="https://img-blog.csdnimg.cn/20210324144607379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>其继承了SqlSessionDaoSupport类，SqlSessionDaoSupport类继承DaoSupport抽象类，DaoSupport抽象类实现了InitializingBean接口，因此实例一个MapperFactoryBean的时候，都会调用InitializingBean接口的afterPropertiesSet方法。而MapperFactoryBean也重写了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MapperFactoryBean在容器初始化时，要确保mapper接口被注册到mapperRegistry</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkDaoConfig</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-built_in">super</span>.checkDaoConfig();<br>  notNull(<span class="hljs-built_in">this</span>.mapperInterface, <span class="hljs-string">&quot;Property &#x27;mapperInterface&#x27; is required&quot;</span>);<br>  <span class="hljs-comment">//通过SqlSession从容器中拿到configuration</span><br>  <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> getSqlSession().getConfiguration();<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.addToConfig &amp;&amp; !configuration.hasMapper(<span class="hljs-built_in">this</span>.mapperInterface)) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">//如果mapperRegistry中不包含当前接口的动态代理工厂，则添加一个</span><br>      configuration.addMapper(<span class="hljs-built_in">this</span>.mapperInterface);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      logger.error(<span class="hljs-string">&quot;Error while adding the mapper &#x27;&quot;</span> + <span class="hljs-built_in">this</span>.mapperInterface + <span class="hljs-string">&quot;&#x27; to configuration.&quot;</span>, e);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看到configuration.addMapper()方法，是不是又想起了configuration熟悉的味道了。</p><p>MapperScannerConfigurer在Spring配置文件中的应用如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 可以使用分号或逗号作为分隔符设置多于一个的包路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.mapper&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- optional unless there are multiple session factories defined --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>作用很简单，扫描特定目录下的所有mapper.java，生成MapperFactoryBean，然后创建动态代理工厂类MapperProxyFactory，并注册至mapperRegistry当中。使用时依赖注入即可。<br>当然，如果只有一个mapper，我们也可以这样配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tUserMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperInterface&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.mapper.TUserMapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是，一般项目中mapper肯定不止一个，一旦新增了一个新的mapper，我们就需要配置很多个这样子的bean，MapperScannerConfigurer帮我们解决了这样的问题。</p><p>sqlSessionFactoryBeanName非必填，但是如果是多数据源的环境，就必须配置好。注意 bean 的<strong>名称name</strong>是<strong>必须</strong>的,而不是 bean 的引用,因此,value 属性在这里替代通常的ref。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】MyBatis与Spring整合</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Mybatis%E4%B8%8ESpring%E6%95%B4%E5%90%88/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Mybatis%E4%B8%8ESpring%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前大部分项目中运用MyBatis均与Spring有关，尤其是Spring Boot大行其道，普通程序员基本上可以无缝的完成一个简单的CRUD项目。通过前面对于MyBatis 源码的学习，我已经对其了（一）如（脸）指（懵）掌（逼），本章我们来玩玩MyBatis与Spring的结合以及它们的融合原理。</p><h1 id="一、什么是Mybatis-Spring"><a href="#一、什么是Mybatis-Spring" class="headerlink" title="一、什么是Mybatis-Spring"></a>一、什么是Mybatis-Spring</h1><p>一句话：将 MyBatis 代码无缝地整合到 Spring 中。集成过程中的增强处理主要体现在以下几个方面：</p><ul><li>Spring 将会加载必要的 MyBatis 工厂类和 session 类</li><li>提供一个简单的方式来注入 MyBatis 数据映射器和 SqlSession 到业务层的 bean 中</li><li>方便集成Spring事务</li><li>翻译 MyBatis 的异常到 Spring 的 DataAccessException 异常(数据访问异常)中</li></ul><h1 id="二、关键配置类"><a href="#二、关键配置类" class="headerlink" title="二、关键配置类"></a>二、关键配置类</h1><h2 id="1-SqlSessionFactoryBean"><a href="#1-SqlSessionFactoryBean" class="headerlink" title="1.SqlSessionFactoryBean"></a>1.SqlSessionFactoryBean</h2><p>SqlSessionFactoryBean作用：用于创建SqlSessionFactory。关键参数有：</p><ul><li>dataSource ：<strong>必填</strong>。用于配置数据源，必须通过这个属性配置数据源。</li><li>mapperLocations ： 配置 SqlSessionFactoryBean 扫描*<strong>mapper.xml</strong>映射文件的路径。</li><li>configLocation ：用于配置<strong>mybatis-config.xml</strong>的路径，除了数据源外，对MyBatis的各种配直仍然可以通过这种方式进行，并且配置MyBatis settings 时只能使用这种方式。但配置文件中任意环境,数据源和 MyBatis 的事务管理器都会被忽略；</li><li>typeAliasesPackage ： 配置包中类的别名，配置后，包中的类在 XML 映射文件中使用时可以省略包名部分，直接使用类名。这个配置不支持Ant风格的路径，当需要配置多个包路径时可以使用分号或逗号进行分隔.</li></ul><h2 id="2-MapperScannerConfigurer"><a href="#2-MapperScannerConfigurer" class="headerlink" title="2.MapperScannerConfigurer"></a>2.MapperScannerConfigurer</h2><p>作用：自动扫描所有的 Mapper 接口，使用时可以直接注入接口。<br>关键参数：</p><ul><li>basePackage ：用于配置基本的包路径。可以使用分号或逗号作为分隔符设置多于一个的包路径，每个映射器将会在指定的包路径中递归地被搜索到 。</li><li>annotationClass ：用于过滤被扫描的接口，如果设置了该属性，那么 MyBatis 的接口只有包含该注解才会被扫描进去。</li></ul><h1 id="三、MyBatis与Spring融合实战"><a href="#三、MyBatis与Spring融合实战" class="headerlink" title="三、MyBatis与Spring融合实战"></a>三、MyBatis与Spring融合实战</h1><h2 id="1-依赖"><a href="#1-依赖" class="headerlink" title="1.依赖"></a>1.依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.42<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-beans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中spring.version为4.3.3.RELEASE。</p><h2 id="2-Spring配置文件"><a href="#2-Spring配置文件" class="headerlink" title="2.Spring配置文件"></a>2.Spring配置文件</h2><p>本项目中的spring配置文件名为applicationContext.xml，主要用于配置：</p><ul><li>数据源</li><li>sqlSessionFactory</li><li>MapperScannerConfigurer</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:db.properties&quot;</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.*&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 基本属性 url、user、password --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_driver&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_url&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_username&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_password&#125;&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300000&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;validationQuery&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SELECT &#x27;x&#x27;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolPreparedStatementPerConnectionSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;stat&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;typeAliasesPackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.entity&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:sqlmapper/*.xml&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.mapper&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- (事务管理)transaction manager --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">qualifier</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-Mybatis配置文件"><a href="#3-Mybatis配置文件" class="headerlink" title="3.Mybatis配置文件"></a>3.Mybatis配置文件</h2><p>文件名为mybatis-config.xml，注意该文件除了settings必须配置在里面外，其他都可以在spring配置文件中配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 别名定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.entity&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-mapper"><a href="#4-mapper" class="headerlink" title="4.mapper"></a>4.mapper</h2><p>还是以UserInfoMapper.xml为例，文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.mapper.UserInfoMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.entity.UserInfo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;openid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;openid&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;role&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;role&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span><br>        id, username, password, openid, role, create_time, update_time<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByPrimaryKey&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>        select<br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>/&gt;</span><br>        from user_info<br>        where id = #&#123;id,jdbcType=VARCHAR&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应dao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfoMapper</span> &#123;<br>    UserInfo <span class="hljs-title function_">selectByPrimaryKey</span><span class="hljs-params">(String id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>po:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String openid;<br>    <span class="hljs-keyword">private</span> Boolean role;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> Date updateTime;<br><span class="hljs-comment">//省略getter、setter</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-测试类"><a href="#5-测试类" class="headerlink" title="5.测试类"></a>5.测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisSpringTest</span> &#123;<br><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserInfoMapper userInfoMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test_selectByPrimaryKey</span><span class="hljs-params">()</span> &#123;<br>        UserInfo userInfo= userInfoMapper.selectByPrimaryKey(<span class="hljs-number">1</span>);<br>        System.out.println(userInfo.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、Mybatis与SpringBoot融合实战"><a href="#四、Mybatis与SpringBoot融合实战" class="headerlink" title="四、Mybatis与SpringBoot融合实战"></a>四、Mybatis与SpringBoot融合实战</h1><h2 id="1-依赖-1"><a href="#1-依赖-1" class="headerlink" title="1.依赖"></a>1.依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql驱动 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br><span class="hljs-comment">&lt;!-- 单元测试相关依赖 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2.application.yml"></a>2.application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#DataSource config 配置数据源信息</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springcloudsell?useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><span class="hljs-comment"># 配置MyBatis的配置文件地址和MyBatis的映射文件地址</span><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:sqlmapper/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 关闭二级缓存</span><br>    <span class="hljs-attr">cache-enabled:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">info</span><br>    <span class="hljs-attr">org.springframework.web:</span> <span class="hljs-string">info</span><br>    <span class="hljs-comment">#    打印sql</span><br>    <span class="hljs-attr">com.enjoylearning.mybatis.mapper:</span> <span class="hljs-string">DEBUG</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br></code></pre></td></tr></table></figure><h2 id="3-启动类"><a href="#3-启动类" class="headerlink" title="3.启动类"></a>3.启动类</h2><p>为了不用在每个mapper.java中添加@Mapper注解，可以统一在启动类加上@MapperScan注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.enjoylearning.mybatis.dao&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisSpringbootDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;------------------MybatisSpringbootDemoApplication-----------start &quot;</span>);<br>        SpringApplication.run(MybatisSpringbootDemoApplication.class, args);<br>        log.info(<span class="hljs-string">&quot;------------------MybatisSpringbootDemoApplication------------end &quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-测试类"><a href="#4-测试类" class="headerlink" title="4.测试类"></a>4.测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = MybatisSpringbootDemoApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentMapperTest</span>&#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserInfoMapper userInfoMapper;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectStudentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userInfoMapper.selectByPrimaryKey(<span class="hljs-string">&quot;1&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;----&gt;查询结果为=&#123;&#125;&quot;</span> + userInfo);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
      <tag>Spring</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】Sql执行</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Sql%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Sql%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇<a href="https://zyxelva.github.io/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Sql%E8%A7%A3%E6%9E%90/">【MyBatis源码学习】Sql解析</a>中，我主要梳理了sql的源码解析过程，本章我通过同样的一个例子，来仔细瞧瞧sql是怎样执行下来的。主要分为三个步骤：</p><ul><li>动态代理生成mapper</li><li>sql执行</li><li>结果集处理</li></ul><p>还是通过同样的例子来开始本章的源码sql执行过程跟踪。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 程序员喜欢的风格</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickStart</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 2.获取sqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">// 3.获取对应mapper</span><br>    <span class="hljs-type">TUserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TUserMapper.class);<br>    <span class="hljs-comment">// 4.执行查询语句并返回单条数据</span><br>    <span class="hljs-type">TUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectByPrimaryKey(<span class="hljs-number">2</span>);<br>    System.out.println(user);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="一、动态代理生成mapper"><a href="#一、动态代理生成mapper" class="headerlink" title="一、动态代理生成mapper"></a>一、动态代理生成mapper</h1><p>我们直接从这句开始跟下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TUserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TUserMapper.class);<br></code></pre></td></tr></table></figure><p>断点调式开始<br><img src="https://img-blog.csdnimg.cn/20210322102317495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>我们看到SqlSession实例是DefaultSqlSession，点进去看看getMapper:<br><img src="https://img-blog.csdnimg.cn/20210322102447860.png"><br>进入的是“大管家”Configuration的getMapper.<br><img src="https://img-blog.csdnimg.cn/20210322102558173.png"></p><p>而真正给出接口代理类的是MapperRegistry.<img src="https://img-blog.csdnimg.cn/20210322102754132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>点进去看看mapperProxyFactory.newInstance(sqlSession)具体生成实例的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// MapperProxyFactory</span><br><span class="hljs-comment">// 生成一个 MapperProxy对象</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">protected</span> T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;<br>    <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; mapperInterface &#125;, mapperProxy);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(SqlSession sqlSession)</span> &#123;<br>    <span class="hljs-keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperProxy</span>&lt;&gt;(sqlSession, mapperInterface, methodCache);<br>    <span class="hljs-keyword">return</span> newInstance(mapperProxy);<br>  &#125;<br></code></pre></td></tr></table></figure><p>发现，运用的正是JDK动态代理。<br>梳理下该过程的时序图，如下：<br><img src="https://img-blog.csdnimg.cn/20210322110043730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"></p><h1 id="二、sql执行"><a href="#二、sql执行" class="headerlink" title="二、sql执行"></a>二、sql执行</h1><p>通过一中的过程，我们可以得到一个接口的mapperProxy动态代理对象了。sql的执行过程就是从MapperProxy的invoke方法开始的。<br><img src="https://img-blog.csdnimg.cn/20210322110414703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210322110853190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>先去缓存中看看是否已经有了现成的MapperMethod，没有才回去new一个出来。<br>接下来，调用 MapperMethod 中的execute方法。<br><img src="https://img-blog.csdnimg.cn/20210322111101131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>本例中，执行的是一个查询语句，进入case SELECT分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">case</span> SELECT: <span class="hljs-comment">// 如果是查询语句</span><br>        <span class="hljs-keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123; <span class="hljs-comment">// 返回为void，且有结果处理器</span><br>          <span class="hljs-comment">// 使用结果处理器执行查询</span><br>          executeWithResultHandler(sqlSession, args);<br>          result = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsMany()) &#123; <span class="hljs-comment">// 多条结果查询</span><br>          result = executeForMany(sqlSession, args);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsMap()) &#123; <span class="hljs-comment">// map结果查询</span><br>          result = executeForMap(sqlSession, args);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsCursor()) &#123; <span class="hljs-comment">// 游标类型结果查询</span><br>          result = executeForCursor(sqlSession, args);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 单条结果查询</span><br>          <span class="hljs-comment">// 将参数顺序与实参对应好</span><br>          <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>          result = sqlSession.selectOne(command.getName(), param);<br>          <span class="hljs-keyword">if</span> (method.returnsOptional()<br>              &amp;&amp; (result == <span class="hljs-literal">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;<br>            result = Optional.ofNullable(result);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>我们可以看到，根据返回的结果类型，进入不同的处理逻辑，主要有</p><ul><li>返回为void</li><li>返回多条结果</li><li>返回map结果</li><li>返回单条结果</li></ul><p>返回值为空的情况下，直接返回 result &#x3D; null。其余几种情况内部都调用了sqlSession 中的selectList 方法。这里我们以selectOne为例。<br>convertArgsToSqlCommandParam()前面我们在<a href="https://blog.csdn.net/kezade/article/details/114801993">【Mybatis源码学习】参数解析</a>做过说明，主要进行参数的顺序映射解析。这里不做赘述。直接看看DefaultSqlSession.selectOne方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-comment">// Popular vote was to return null on 0 results and throw exception on too many.</span><br>    List&lt;T&gt; list = <span class="hljs-built_in">this</span>.selectList(statement, parameter);<br>    <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TooManyResultsException</span>(<span class="hljs-string">&quot;Expected one result (or null) to be returned by selectOne(), but found: &quot;</span> + list.size());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>如果selectList查询返回1条，则直接返回；如果返回多条则抛出异常，否则直接返回null。<br>点进去看看selectList方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询结果列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;E&gt; 返回的列表元素的类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement SQL语句</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter 参数对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> rowBounds  翻页限制条件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 结果对象列表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 获取查询语句</span><br>      <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(statement);<br>      <span class="hljs-comment">// 交由执行器进行查询</span><br>      <span class="hljs-keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error querying database.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里说明下，mybatis默认是开启了二级缓存的，所以这里executor其实是CachingExecutor.我们可以在创建sqlSession中看看Configuration中创建执行器时的代码：<br><img src="https://img-blog.csdnimg.cn/20210322135551582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>要关闭二级缓存，我们可以在mybatis-config.xml中显示配置，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 二级缓存开关，默认为开启--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>关闭二级缓存，我们回到selectList方法中，继续跟下这段代码的执行过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER)<br></code></pre></td></tr></table></figure><p>executor这里为SimpleExecutor，其首先调用的是BaseExecutor的query方法。<br><img src="https://img-blog.csdnimg.cn/2021032214023869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询数据库中的数据</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> ms 映射语句</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter 参数对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> rowBounds 翻页限制条件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> resultHandler 结果处理器</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key 缓存的键</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> boundSql 查询语句</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;E&gt; 结果类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 结果列表</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing a query&quot;</span>).object(ms.getId());<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-comment">// 执行器已经关闭</span><br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123; <span class="hljs-comment">// 新的查询栈且要求清除缓存</span><br>      <span class="hljs-comment">// 新的查询栈，故清除本地缓存，即清除一级缓存</span><br>      clearLocalCache();<br>    &#125;<br>    List&lt;E&gt; list;<br>    <span class="hljs-keyword">try</span> &#123;<br>      queryStack++;<br>      <span class="hljs-comment">// 尝试从本地缓存获取结果</span><br>      list = resultHandler == <span class="hljs-literal">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 本地缓存中有结果，则对于CALLABLE语句还需要绑定到IN/INOUT参数上</span><br>        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 本地缓存没有结果，故需要查询数据库</span><br>        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      queryStack--;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 懒加载操作的处理</span><br>      <span class="hljs-keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;<br>        deferredLoad.load();<br>      &#125;<br>      <span class="hljs-comment">// issue #601</span><br>      deferredLoads.clear();<br>      <span class="hljs-comment">// 如果本地缓存的作用域为STATEMENT，则立刻清除本地缓存</span><br>      <span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>        <span class="hljs-comment">// issue #482</span><br>        clearLocalCache();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>  &#125;<br></code></pre></td></tr></table></figure><p>先从一级缓存中查询是否已有结果，没有则才去查询数据库。我们直接看查询数据库的部分，也就是方法queryFromDatabase().<br><img src="https://img-blog.csdnimg.cn/20210322141109713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>进入doQuery()方法，发现这里是个模版方法，由于前面提到我们此处的执行器为SimpleExecutor，所以这个方法来到了SimpleExecutor的doQuery()方法.</p><p><img src="https://img-blog.csdnimg.cn/20210322141449815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>如上，该方法主要有三步：</p><ul><li>新建一个StatementHandler</li><li>获取Statement</li><li>StatementHandler.query（实际调用的是PreparedStatementHandler）获取查询结果。</li></ul><p>我们看看prepareStatement方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//SimpleExcutor</span><br> <span class="hljs-keyword">private</span> Statement <span class="hljs-title function_">prepareStatement</span><span class="hljs-params">(StatementHandler handler, Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>   Statement stmt;<br><span class="hljs-comment">//获取数据库连接</span><br>   <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> getConnection(statementLog);<br>   <span class="hljs-comment">//创建Statement</span><br>   stmt = handler.prepare(connection);<br>   <span class="hljs-comment">//为Statement设置IN参数</span><br>   handler.parameterize(stmt);<br>   <span class="hljs-keyword">return</span> stmt;<br> &#125;<br><br></code></pre></td></tr></table></figure><p>经典的流程：获取数据库连接；创建Statement; 为Statement设置IN参数。再看第三步执行语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//PreparedStatementHandler</span><br> <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>   <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> (PreparedStatement) statement;<br><span class="hljs-comment">// 执行SQL</span><br>   ps.execute();<br><span class="hljs-comment">// 处理执行结果</span><br>   <span class="hljs-keyword">return</span> resultSetHandler.&lt;E&gt; handleResultSets(ps);<br> &#125;<br><br></code></pre></td></tr></table></figure><p>查询完毕，总结一下这个过程的时序图，一目了然：<br><img src="https://img-blog.csdnimg.cn/20210322151224922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"></p><h1 id="三、结果集处理"><a href="#三、结果集处理" class="headerlink" title="三、结果集处理"></a>三、结果集处理</h1><p>结果集的映射，这部分我会在下一篇详细的跟进。Game over.</p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】Sql解析</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Sql%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91Sql%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>之前我在<a href="https://blog.csdn.net/kezade/article/details/114670150">【Mybatis源码学习】初始化阶段</a>中重点讲述了核心配置类XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder各自的功能。我们先熟悉下这“三剑客”，看下图即可。<br><img src="https://img-blog.csdnimg.cn/20210315205850237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>本章节中，我们重点跟一下XMLMapperBuilder、XMLStatementBuilder解析sql的源码过程。<br>XMLMapperBuilder、XMLStatementBuilder均实现了BaseBuilder。<br><img src="https://img-blog.csdnimg.cn/2021031521015322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>XMLMapperBuilder主要功能：<br>    遍历mybatis中mapperLocations属性中的xml文件中每个节点的Builder，比如user.xml，内部会使用XMLStatementBuilder处理xml中的每个节点。<br>XMLStatementBuilder主要功能：<br>    解析xml文件中各个节点，比如select,insert,update,delete节点，内部会使用XMLScriptBuilder处理节点的sql部分，遍历产生的数据会丢到Configuration的mappedStatements中。</p><p>在<a href="https://blog.csdn.net/kezade/article/details/114670150">【Mybatis源码学习】初始化阶段</a>中，我们分析了XMLConfigBuilder的主要工作流程。还是以下面的代码为例，重点分析下XMLMapperBuilder和XMLStatementBuilder解析sql的流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//--------------------第一阶段---------------------------</span><br>    <span class="hljs-comment">// 1.读取mybatis配置文件创SqlSessionFactory</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>    <span class="hljs-comment">// 1.读取mybatis配置文件创SqlSessionFactory</span><br>    sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>    inputStream.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>进入new SqlSessionFactoryBuilder().build(inputStream)方法，我们看看parse的方法。<br><img src="https://img-blog.csdnimg.cn/20210316135635377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2021031613571219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>而我这里的mybatis-config.xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置自动驼峰转换 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 开启懒加载 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。默认：true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 别名定义 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.entity&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.Interceptors.ThresholdInterceptor&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;threshold&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pageSizeZero&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置environment环境 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 环境配置1，每个SqlSessionFactory对应一个环境 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 映射文件，mapper的配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--直接映射到相应的mapper文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/UserInfoMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/TUserTestMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/TRoleMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/TJobHistoryMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/TPositionMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/THealthReportFemaleMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;sqlmapper/THealthReportMaleMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <br></code></pre></td></tr></table></figure><h1 id="二、XMLMapperBuilder"><a href="#二、XMLMapperBuilder" class="headerlink" title="二、XMLMapperBuilder"></a>二、XMLMapperBuilder</h1><p>对于parser.evalNode(“&#x2F;configuration”)，这里我就不赘述了，重点关注parseConfiguration里面的mapperElement()方法。<br><img src="https://img-blog.csdnimg.cn/20210316135924625.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>这个mapperElement()主要就是解析&lt;mappers&gt;标签下的内容. 这里贴出这个方法的源码，包含注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 解析mappers节点，例如：</span><br><span class="hljs-comment">  * &lt;mappers&gt;</span><br><span class="hljs-comment">  *    &lt;mapper resource=&quot;com/github/yeecode/mybatisDemo/UserDao.xml&quot;/&gt;</span><br><span class="hljs-comment">  *    &lt;package name=&quot;com.github.yeecode.mybatisDemo&quot; /&gt;</span><br><span class="hljs-comment">  * &lt;/mappers&gt;</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> parent mappers节点</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mapperElement</span><span class="hljs-params">(XNode parent)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-keyword">for</span> (XNode child : parent.getChildren()) &#123;<br>       <span class="hljs-comment">// 处理mappers的子节点，即mapper节点或者package节点</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;package&quot;</span>.equals(child.getName())) &#123; <span class="hljs-comment">// package节点</span><br>         <span class="hljs-comment">// 取出包路径</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">mapperPackage</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>         <span class="hljs-comment">// 全部加入Mappers中</span><br>         configuration.addMappers(mapperPackage);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-comment">// resource、url、class这三个属性只有一个生效</span><br>         <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;resource&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;url&quot;</span>);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">mapperClass</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;class&quot;</span>);<br>         <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span> &amp;&amp; url == <span class="hljs-literal">null</span> &amp;&amp; mapperClass == <span class="hljs-literal">null</span>) &#123;<br>           ErrorContext.instance().resource(resource);<br>           <span class="hljs-comment">// 获取文件的输入流</span><br>           <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>           <span class="hljs-comment">// 使用XMLMapperBuilder解析映射文件</span><br>           <span class="hljs-type">XMLMapperBuilder</span> <span class="hljs-variable">mapperParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperBuilder</span>(inputStream, configuration, resource, configuration.getSqlFragments());<br>           mapperParser.parse();<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">null</span> &amp;&amp; url != <span class="hljs-literal">null</span> &amp;&amp; mapperClass == <span class="hljs-literal">null</span>) &#123;<br>           ErrorContext.instance().resource(url);<br>           <span class="hljs-comment">// 从网络获得输入流</span><br>           <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getUrlAsStream(url);<br>           <span class="hljs-comment">// 使用XMLMapperBuilder解析映射文件</span><br>           <span class="hljs-type">XMLMapperBuilder</span> <span class="hljs-variable">mapperParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperBuilder</span>(inputStream, configuration, url, configuration.getSqlFragments());<br>           mapperParser.parse();<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">null</span> &amp;&amp; url == <span class="hljs-literal">null</span> &amp;&amp; mapperClass != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">// 配置的不是映射文件，而是映射接口</span><br>           Class&lt;?&gt; mapperInterface = Resources.classForName(mapperClass);<br>           configuration.addMapper(mapperInterface);<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span>);<br>         &#125;<br>       &#125;<br>     &#125;<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>for循环里的if主要是针对&lt;mappers&gt;标签下还有&lt;package&gt;标签的解析。而else则是针对&lt;mappers&gt;标签下还有&lt;mapper&gt;标签的解析。通常，我们的&lt;mapper&gt;会有三种形式，且resource、url、class这三个属性只有一个生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 映射器 1使用类路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 2使用绝对url路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 3使用java类名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 4自动扫描包下所有映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里关注两个方法：</p><ul><li>mapperParser.parse();</li><li>configuration.addMapper(mapperInterface);</li></ul><p>它们最终的目的就是将映射器的class对象，以及其代理类设置到集合中，采用的是JDK代理。<br>我们先看addMapper()做了些啥。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将mapper接口的工厂类添加到mapper注册中心</span><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMapper</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>  <span class="hljs-keyword">if</span> (type.isInterface()) &#123;<br>      <span class="hljs-keyword">if</span> (hasMapper(type)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Type &quot;</span> + type + <span class="hljs-string">&quot; is already known to the MapperRegistry.&quot;</span>);<br>      &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">loadCompleted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">//实例化Mapper接口的代理工程类，并将信息添加至knownMappers</span><br>      knownMappers.put(type, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperProxyFactory</span>&lt;T&gt;(type));<br>      <span class="hljs-comment">// It&#x27;s important that the type is added before the parser is run</span><br>      <span class="hljs-comment">// otherwise the binding may automatically be attempted by the</span><br>      <span class="hljs-comment">// mapper parser. If the type is already known, it won&#x27;t try.</span><br>      <span class="hljs-comment">//解析接口上的注解信息，并添加至configuration对象</span><br>      <span class="hljs-type">MapperAnnotationBuilder</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperAnnotationBuilder</span>(config, type);<br>      parser.parse();<br>      loadCompleted = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (!loadCompleted) &#123;<br>        knownMappers.remove(type);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而XMLMapperBuilder的parse()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//判断是否已经加载该配置文件</span><br>    <span class="hljs-keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;<br>        configurationElement(parser.evalNode(<span class="hljs-string">&quot;/mapper&quot;</span>));<span class="hljs-comment">//处理mapper节点</span><br>        configuration.addLoadedResource(resource);<span class="hljs-comment">//将mapper文件添加到configuration.loadedResources中</span><br>        bindMapperForNamespace();<span class="hljs-comment">//注册mapper接口</span><br>    &#125;<br>    <span class="hljs-comment">//处理解析失败的ResultMap节点</span><br>    parsePendingResultMaps();<br>    <span class="hljs-comment">//处理解析失败的CacheRef节点</span><br>    parsePendingCacheRefs();<br>    <span class="hljs-comment">//处理解析失败的Sql语句节点</span><br>    parsePendingStatements();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在看看MapperAnnotationBuilder的parse方法，该类主要是以注解的方式构建mapper，用的比较少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 解析包含注解的接口文档</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> type.toString();<br>   <span class="hljs-comment">// 防止重复分析</span><br>   <span class="hljs-keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;<br>     <span class="hljs-comment">// 寻找类名称对应的 resource路径下是否有 xml 配置，如果有则直接解析掉，这样就支持注解和xml一起混合使用了</span><br>     loadXmlResource();<br>     <span class="hljs-comment">// 记录资源路径</span><br>     configuration.addLoadedResource(resource);<br>     <span class="hljs-comment">// 设置命名空间</span><br>     assistant.setCurrentNamespace(type.getName());<br>     <span class="hljs-comment">// 处理缓存</span><br>     parseCache();<br>     parseCacheRef();<br>     Method[] methods = type.getMethods();<br>     <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-comment">// 排除桥接方法，桥接方法是为了匹配泛型的类型擦除而由编译器自动引入的，并非用户编写的方法，因此要排除掉。</span><br>         <span class="hljs-comment">// issue #237</span><br>         <span class="hljs-keyword">if</span> (!method.isBridge()) &#123;<br>           <span class="hljs-comment">// 解析该方法</span><br>           parseStatement(method);<br>         &#125;<br>       &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>         <span class="hljs-comment">// 异常方法暂存起来</span><br>         configuration.addIncompleteMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodResolver</span>(<span class="hljs-built_in">this</span>, method));<br>       &#125;<br>     &#125;<br>   &#125;<br>   <span class="hljs-comment">// 处理异常的方法</span><br>   parsePendingMethods();<br> &#125;<br></code></pre></td></tr></table></figure><p>关键看看parseStatement()方法，主要就是解析注解上的信息。再通过getSqlSourceFromAnnotations方法获取sqlSource.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 解析该方法，主要是解析方法上的注解信息</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseStatement</span><span class="hljs-params">(Method method)</span> &#123;<br>   <span class="hljs-comment">// 通过字方法获取参数类型</span><br>   Class&lt;?&gt; parameterTypeClass = getParameterType(method);<br>   <span class="hljs-comment">// 获取方法的脚本语言渠道</span><br>   <span class="hljs-type">LanguageDriver</span> <span class="hljs-variable">languageDriver</span> <span class="hljs-operator">=</span> getLanguageDriver(method);<br>   <span class="hljs-comment">// 通过注解获取SqlSource</span><br>   <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> getSqlSourceFromAnnotations(method, parameterTypeClass, languageDriver);<br>   <span class="hljs-keyword">if</span> (sqlSource != <span class="hljs-literal">null</span>) &#123;<br>     <span class="hljs-comment">// 获取方法上可能存在的配置信息，配置信息由@Options注解指定</span><br>     <span class="hljs-type">Options</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> method.getAnnotation(Options.class);<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">mappedStatementId</span> <span class="hljs-operator">=</span> type.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>     <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-type">StatementType</span> <span class="hljs-variable">statementType</span> <span class="hljs-operator">=</span> StatementType.PREPARED;<br>     <span class="hljs-type">ResultSetType</span> <span class="hljs-variable">resultSetType</span> <span class="hljs-operator">=</span> configuration.getDefaultResultSetType();<br>     <span class="hljs-type">SqlCommandType</span> <span class="hljs-variable">sqlCommandType</span> <span class="hljs-operator">=</span> getSqlCommandType(method);<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">isSelect</span> <span class="hljs-operator">=</span> sqlCommandType == SqlCommandType.SELECT;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">flushCache</span> <span class="hljs-operator">=</span> !isSelect;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">useCache</span> <span class="hljs-operator">=</span> isSelect;<br><br>     KeyGenerator keyGenerator;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">keyProperty</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">keyColumn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">if</span> (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) &#123;<br>       <span class="hljs-comment">// first check for SelectKey annotation - that overrides everything else</span><br>       <span class="hljs-type">SelectKey</span> <span class="hljs-variable">selectKey</span> <span class="hljs-operator">=</span> method.getAnnotation(SelectKey.class);<br>       <span class="hljs-keyword">if</span> (selectKey != <span class="hljs-literal">null</span>) &#123;<br>         keyGenerator = handleSelectKeyAnnotation(selectKey, mappedStatementId, getParameterType(method), languageDriver);<br>         keyProperty = selectKey.keyProperty();<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options == <span class="hljs-literal">null</span>) &#123;<br>         keyGenerator = configuration.isUseGeneratedKeys() ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>         keyGenerator = options.useGeneratedKeys() ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;<br>         keyProperty = options.keyProperty();<br>         keyColumn = options.keyColumn();<br>       &#125;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       keyGenerator = NoKeyGenerator.INSTANCE;<br>     &#125;<br><br>     <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-keyword">if</span> (FlushCachePolicy.TRUE.equals(options.flushCache())) &#123;<br>         flushCache = <span class="hljs-literal">true</span>;<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (FlushCachePolicy.FALSE.equals(options.flushCache())) &#123;<br>         flushCache = <span class="hljs-literal">false</span>;<br>       &#125;<br>       useCache = options.useCache();<br>       fetchSize = options.fetchSize() &gt; -<span class="hljs-number">1</span> || options.fetchSize() == Integer.MIN_VALUE ? options.fetchSize() : <span class="hljs-literal">null</span>; <span class="hljs-comment">//issue #348</span><br>       timeout = options.timeout() &gt; -<span class="hljs-number">1</span> ? options.timeout() : <span class="hljs-literal">null</span>;<br>       statementType = options.statementType();<br>       <span class="hljs-keyword">if</span> (options.resultSetType() != ResultSetType.DEFAULT) &#123;<br>         resultSetType = options.resultSetType();<br>       &#125;<br>     &#125;<br><br>     <span class="hljs-type">String</span> <span class="hljs-variable">resultMapId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMapAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(ResultMap.class);<br>     <span class="hljs-keyword">if</span> (resultMapAnnotation != <span class="hljs-literal">null</span>) &#123;<br>       resultMapId = String.join(<span class="hljs-string">&quot;,&quot;</span>, resultMapAnnotation.value());<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isSelect) &#123;<br>       resultMapId = parseResultMap(method);<br>     &#125;<br><br>     <span class="hljs-comment">// 将获取到的信息存入 configuration</span><br>     assistant.addMappedStatement(<br>         mappedStatementId,<br>         sqlSource,<br>         statementType,<br>         sqlCommandType,<br>         fetchSize,<br>         timeout,<br>         <span class="hljs-comment">// ParameterMapID</span><br>         <span class="hljs-literal">null</span>,<br>         parameterTypeClass,<br>         resultMapId,<br>         getReturnType(method),<br>         resultSetType,<br>         flushCache,<br>         useCache,<br>         <span class="hljs-comment">// TODO gcode issue #577</span><br>         <span class="hljs-literal">false</span>,<br>         keyGenerator,<br>         keyProperty,<br>         keyColumn,<br>         <span class="hljs-comment">// DatabaseID</span><br>         <span class="hljs-literal">null</span>,<br>         languageDriver,<br>         <span class="hljs-comment">// ResultSets</span><br>         options != <span class="hljs-literal">null</span> ? nullOrEmpty(options.resultSets()) : <span class="hljs-literal">null</span>);<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>getSqlSourceFromAnnotations()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 通过注解获取SqlSource对象</span><br><span class="hljs-comment">  * </span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> method 含有注解的方法</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> parameterType 参数类型</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> languageDriver 语言渠道</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> SqlSource对象</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> SqlSource <span class="hljs-title function_">getSqlSourceFromAnnotations</span><span class="hljs-params">(Method method, Class&lt;?&gt; parameterType, LanguageDriver languageDriver)</span> &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-comment">// 遍历寻找是否有 Select、Insert、Update、Delete四个注解之一</span><br>     Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; sqlAnnotationType = getSqlAnnotationType(method);<br>     <span class="hljs-comment">// 遍历寻找是否有 SelectProvider、InsertProvider、UpdateProvider、DeleteProvider 四个注解之一</span><br>     Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; sqlProviderAnnotationType = getSqlProviderAnnotationType(method);<br>     <span class="hljs-keyword">if</span> (sqlAnnotationType != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-keyword">if</span> (sqlProviderAnnotationType != <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-comment">// 两类注解不能同时使用</span><br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;You cannot supply both a static SQL and SqlProvider to method named &quot;</span> + method.getName());<br>       &#125;<br>       <span class="hljs-comment">// 取出Select、Insert、Update、Delete四个注解之一</span><br>       <span class="hljs-type">Annotation</span> <span class="hljs-variable">sqlAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(sqlAnnotationType);<br>       <span class="hljs-comment">// 取出value值</span><br>       <span class="hljs-keyword">final</span> String[] strings = (String[]) sqlAnnotation.getClass().getMethod(<span class="hljs-string">&quot;value&quot;</span>).invoke(sqlAnnotation);<br>       <span class="hljs-comment">// 基于字符串构建SqlSource，直接注解获取SQL</span><br>       <span class="hljs-keyword">return</span> buildSqlSourceFromStrings(strings, parameterType, languageDriver);<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sqlProviderAnnotationType != <span class="hljs-literal">null</span>) &#123;<br>       <span class="hljs-comment">// // 取出 SelectProvider、InsertProvider、UpdateProvider、DeleteProvider 四个注解之一</span><br>       <span class="hljs-type">Annotation</span> <span class="hljs-variable">sqlProviderAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(sqlProviderAnnotationType);<br>       <span class="hljs-comment">// 根据对应的方法获取SqlSource，间接注解获取SQL</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderSqlSource</span>(assistant.getConfiguration(), sqlProviderAnnotation, type, method);<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Could not find value method on SQL annotation.  Cause: &quot;</span> + e, e);<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>总结下解析mapper的parse()方法有两种方式：</p><ul><li>XMLMapperBuilder的parse方法</li><li>MapperAnnotationBuilder的parse方法</li></ul><p>MapperAnnotationBuilder的parse方法与XMLMapperBuilder的parse方法逻辑上略有不同，主要体现在对节点的解析上。</p><p>上面只是大致分析了*mapper.java与*mapper.xml映射注册的过程，由于我们的*mapper.xml还有很多其他的xml标签，这里我们需要具体了解下其中的解析流程。还是回到XMLMapperBuilder的parse()方法。<br>我们看看configurationElement()方法干了些啥。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 解析映射文件的下层节点</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> context 映射文件根节点</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurationElement</span><span class="hljs-params">(XNode context)</span> &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//获取mapper节点的namespace属性</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">namespace</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;namespace&quot;</span>);<br>     <span class="hljs-keyword">if</span> (namespace == <span class="hljs-literal">null</span> || namespace.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Mapper&#x27;s namespace cannot be empty&quot;</span>);<br>     &#125;<br>     <span class="hljs-comment">//设置builderAssistant的namespace属性</span><br>     builderAssistant.setCurrentNamespace(namespace);<br>     <span class="hljs-comment">//解析cache-ref节点</span><br>     cacheRefElement(context.evalNode(<span class="hljs-string">&quot;cache-ref&quot;</span>));<br>     <span class="hljs-comment">//重点分析 ：解析cache节点----------------1-------------------二级缓存</span><br>     cacheElement(context.evalNode(<span class="hljs-string">&quot;cache&quot;</span>));<br>     <span class="hljs-comment">//解析parameterMap节点（已废弃）</span><br>     parameterMapElement(context.evalNodes(<span class="hljs-string">&quot;/mapper/parameterMap&quot;</span>));<br>     <span class="hljs-comment">//重点分析 ：解析resultMap节点（基于数据结果去理解）----------------2-------------------</span><br>     resultMapElements(context.evalNodes(<span class="hljs-string">&quot;/mapper/resultMap&quot;</span>));<br>     <span class="hljs-comment">//解析sql节点</span><br>     sqlElement(context.evalNodes(<span class="hljs-string">&quot;/mapper/sql&quot;</span>));<br>     <span class="hljs-comment">//重点分析 ：解析select、insert、update、delete节点 ----------------3-------------------sql解析</span><br>     buildStatementFromContext(context.evalNodes(<span class="hljs-string">&quot;select|insert|update|delete&quot;</span>));<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error parsing Mapper XML. The XML location is &#x27;&quot;</span> + resource + <span class="hljs-string">&quot;&#x27;. Cause: &quot;</span> + e, e);<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>重点关注这几个方法：</p><ul><li>cacheElement：解析&lt;cache&gt;，与二级缓存有关.</li><li>resultMapElements：解析&lt;resultMap&gt;，结果集映射.</li><li>sqlElement：解析sql节点&lt;sql&gt;.</li><li>buildStatementFromContext：解析&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;节点.</li></ul><p>而当前我们的UserInfoMapper如下：<br><img src="https://img-blog.csdnimg.cn/20210316160708894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>接下来，我们关注buildStatementFromContext解析&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;标签的过程。主要就是看看XMLStatementBuilder是怎么干活儿的。</p><h1 id="三、XMLStatementBuilder"><a href="#三、XMLStatementBuilder" class="headerlink" title="三、XMLStatementBuilder"></a>三、XMLStatementBuilder</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解析select、insert、update、delete节点</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildStatementFromContext</span><span class="hljs-params">(List&lt;XNode&gt; list)</span> &#123;<br>    <span class="hljs-keyword">if</span> (configuration.getDatabaseId() != <span class="hljs-literal">null</span>) &#123;<br>        buildStatementFromContext(list, configuration.getDatabaseId());<br>    &#125;<br>    buildStatementFromContext(list, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">//处理所有的sql语句节点并注册至configuration对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildStatementFromContext</span><span class="hljs-params">(List&lt;XNode&gt; list, String requiredDatabaseId)</span> &#123;<br>    <span class="hljs-keyword">for</span> (XNode context : list) &#123;<br>        <span class="hljs-comment">//创建XMLStatementBuilder 专门用于解析sql语句节点</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">XMLStatementBuilder</span> <span class="hljs-variable">statementParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLStatementBuilder</span>(configuration, builderAssistant, context, requiredDatabaseId);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//解析sql语句节点，并将解析结果存储到 configuration 的 mappedStatements 集合中</span><br>            statementParser.parseStatementNode();<br>        &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>            configuration.addIncompleteStatement(statementParser);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点进去看看parseStatementNode()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseStatementNode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取sql节点的id</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">databaseId</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;databaseId&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (!databaseIdMatchesCurrent(id, databaseId, <span class="hljs-built_in">this</span>.requiredDatabaseId)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">/*获取sql节点的各种属性*/</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> context.getIntAttribute(<span class="hljs-string">&quot;fetchSize&quot;</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> context.getIntAttribute(<span class="hljs-string">&quot;timeout&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;parameterMap&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">parameterType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;parameterType&quot;</span>);<br>    Class&lt;?&gt; parameterTypeClass = resolveClass(parameterType);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultMap&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultType&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">lang</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;lang&quot;</span>);<br>    <span class="hljs-type">LanguageDriver</span> <span class="hljs-variable">langDriver</span> <span class="hljs-operator">=</span> getLanguageDriver(lang);<br><br>    Class&lt;?&gt; resultTypeClass = resolveClass(resultType);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultSetType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultSetType&quot;</span>);<br>    <span class="hljs-type">StatementType</span> <span class="hljs-variable">statementType</span> <span class="hljs-operator">=</span> StatementType.valueOf(context.getStringAttribute(<span class="hljs-string">&quot;statementType&quot;</span>, StatementType.PREPARED.toString()));<br>    <span class="hljs-type">ResultSetType</span> <span class="hljs-variable">resultSetTypeEnum</span> <span class="hljs-operator">=</span> resolveResultSetType(resultSetType);<br><br>    <span class="hljs-comment">//根据sql节点的名称获取SqlCommandType（INSERT, UPDATE, DELETE, SELECT）</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">nodeName</span> <span class="hljs-operator">=</span> context.getNode().getNodeName();<br>    <span class="hljs-type">SqlCommandType</span> <span class="hljs-variable">sqlCommandType</span> <span class="hljs-operator">=</span> SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSelect</span> <span class="hljs-operator">=</span> sqlCommandType == SqlCommandType.SELECT;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flushCache</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;flushCache&quot;</span>, !isSelect);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">useCache</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;useCache&quot;</span>, isSelect);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">resultOrdered</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;resultOrdered&quot;</span>, <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// Include Fragments before parsing</span><br>    <span class="hljs-comment">//在解析sql语句之前先解析&lt;include&gt;节点(查询的结果有哪些参数)</span><br>    <span class="hljs-type">XMLIncludeTransformer</span> <span class="hljs-variable">includeParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLIncludeTransformer</span>(configuration, builderAssistant);<br>    includeParser.applyIncludes(context.getNode());<br><br>    <span class="hljs-comment">// Parse selectKey after includes and remove them.</span><br>    <span class="hljs-comment">//在解析sql语句之前，处理&lt;selectKey&gt;子节点，并在xml节点中删除</span><br>    processSelectKeyNodes(id, parameterTypeClass, langDriver);<br><br>    <span class="hljs-comment">// Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)</span><br>    <span class="hljs-comment">//解析sql语句是解析mapper.xml的核心，实例化sqlSource，使用sqlSource封装sql语句</span><br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> langDriver.createSqlSource(configuration, context, parameterTypeClass);<br>    <span class="hljs-comment">//获取resultSets属性</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultSets</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultSets&quot;</span>);<br>    <span class="hljs-comment">//获取主键信息keyProperty</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyProperty</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;keyProperty&quot;</span>);<br>    <span class="hljs-comment">//获取主键信息keyColumn</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyColumn</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;keyColumn&quot;</span>);<br><br>    <span class="hljs-comment">//根据&lt;selectKey&gt;获取对应的SelectKeyGenerator的id</span><br>    KeyGenerator keyGenerator;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyStatementId</span> <span class="hljs-operator">=</span> id + SelectKeyGenerator.SELECT_KEY_SUFFIX;<br>    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, <span class="hljs-literal">true</span>);<br><br><br>    <span class="hljs-comment">//获取keyGenerator对象，如果是insert类型的sql语句，会使用KeyGenerator接口获取数据库生产的id；</span><br>    <span class="hljs-keyword">if</span> (configuration.hasKeyGenerator(keyStatementId)) &#123;<br>        keyGenerator = configuration.getKeyGenerator(keyStatementId);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        keyGenerator = context.getBooleanAttribute(<span class="hljs-string">&quot;useGeneratedKeys&quot;</span>,<br>                configuration.isUseGeneratedKeys() &amp;&amp; SqlCommandType.INSERT.equals(sqlCommandType))<br>                ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-comment">//通过builderAssistant实例化MappedStatement，并注册至configuration对象</span><br>    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,<br>            fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,<br>            resultSetTypeEnum, flushCache, useCache, resultOrdered,<br>            keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);<br>&#125;<br></code></pre></td></tr></table></figure><p>总结下它干了哪些活儿：</p><ul><li>解析 &lt;include&gt; 节点</li><li>解析 &lt;selectKey&gt; 节点</li><li>解析 SQL，获取 SqlSource</li><li>构建 MappedStatement 实例</li></ul><p>解析&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;这些标签的关键方法在这里</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SqlSource sqlSource = langDriver.create<span class="hljs-constructor">SqlSource(<span class="hljs-params">configuration</span>, <span class="hljs-params">context</span>, <span class="hljs-params">parameterTypeClass</span>)</span>;<br></code></pre></td></tr></table></figure><p>看看这个方法的一般实现类XMLScriptBuilder.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-comment">//解析xml文件中的sql语句并封装成SqlSource</span><br><span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, XNode script, Class&lt;?&gt; parameterType)</span> &#123;<br>  <span class="hljs-type">XMLScriptBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLScriptBuilder</span>(configuration, script, parameterType);<br>  <span class="hljs-keyword">return</span> builder.parseScriptNode();<br>&#125;<br><br><span class="hljs-comment">//解析sql脚本，返回SqlSource</span><br><span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">parseScriptNode</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">rootSqlNode</span> <span class="hljs-operator">=</span> parseDynamicTags(context);<br>  <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">if</span> (isDynamic) &#123;<br>    sqlSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicSqlSource</span>(configuration, rootSqlNode);<span class="hljs-comment">//动态sql的解析</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    sqlSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSqlSource</span>(configuration, rootSqlNode, parameterType);<span class="hljs-comment">//非动态sql的解析</span><br>  &#125;<br>  <span class="hljs-comment">//实际返回的都是StaticSqlSource，可以直接让数据库执行的sql语句，包含?占位符</span><br>  <span class="hljs-keyword">return</span> sqlSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法parseDynamicTags()就是真正去解析sql语句的淫儿了。当执行createSqlSource()方法中的new XMLScriptBuilder(configuration, script, parameterType)时，我们看下，它初始化了些什么东东。<br><img src="https://img-blog.csdnimg.cn/20210316174946741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>可以看到关键的部分，对于不同的标签，比如&lt;trim&gt;、&lt;where&gt;等，都有不同的处理策略。在执行parseDynamicTags()时，会判断节点是否包含一些动态标记，比如 ${} 占位符以及动态 SQL 节点等。若包含动态标记，则会将 isDynamic 设为 true。后续可根据 isDynamic 创建不同的 SqlSource。<br><img src="https://img-blog.csdnimg.cn/20210315210703601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"></p><p>通常，我们在xml内写sql都是片段的去编写，主要语句写完了，还会有些动态标签包裹的语句，对于mybatis来说，每个片段都会解析成为一个sqlNode存起来，我们先来回忆一下sqlNode有哪些实现类。<br><img src="https://img-blog.csdnimg.cn/20210315210642589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>这些 SqlNode 是如何生成的呢？我们看看parseDynamicTags()中的这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">handler.handleNode(child, contents);<br></code></pre></td></tr></table></figure><p>它有很多个实现。<br><img src="https://img-blog.csdnimg.cn/20210316180045568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>到此 SQL 语句的解析过程搞完了。但我们只是完成了xml解析为sqlSource的流程，而一般sql语句还会有一些附加属性，需要mybatis去解析出来，封装至MappedStatement当中，最终还要把它注册到configuration。回到XMLStatementBuilder的parseStatementNode()方法。<br><img src="https://img-blog.csdnimg.cn/2021031618090324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>具体方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加MappedStatement对象</span><br><span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">addMappedStatement</span><span class="hljs-params">(</span><br><span class="hljs-params">    String id,</span><br><span class="hljs-params">    SqlSource sqlSource,</span><br><span class="hljs-params">    StatementType statementType,</span><br><span class="hljs-params">    SqlCommandType sqlCommandType,</span><br><span class="hljs-params">    Integer fetchSize,</span><br><span class="hljs-params">    Integer timeout,</span><br><span class="hljs-params">    String parameterMap,</span><br><span class="hljs-params">    Class&lt;?&gt; parameterType,</span><br><span class="hljs-params">    String resultMap,</span><br><span class="hljs-params">    Class&lt;?&gt; resultType,</span><br><span class="hljs-params">    ResultSetType resultSetType,</span><br><span class="hljs-params">    <span class="hljs-type">boolean</span> flushCache,</span><br><span class="hljs-params">    <span class="hljs-type">boolean</span> useCache,</span><br><span class="hljs-params">    <span class="hljs-type">boolean</span> resultOrdered,</span><br><span class="hljs-params">    KeyGenerator keyGenerator,</span><br><span class="hljs-params">    String keyProperty,</span><br><span class="hljs-params">    String keyColumn,</span><br><span class="hljs-params">    String databaseId,</span><br><span class="hljs-params">    LanguageDriver lang,</span><br><span class="hljs-params">    String resultSets)</span> &#123;<br><br>  <span class="hljs-keyword">if</span> (unresolvedCacheRef) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;Cache-ref not yet resolved&quot;</span>);<br>  &#125;<br><br>  id = applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br>  <span class="hljs-type">boolean</span> <span class="hljs-variable">isSelect</span> <span class="hljs-operator">=</span> sqlCommandType == SqlCommandType.SELECT;<br><br>  <span class="hljs-comment">//使用建造者模式创建一个mappedStatment</span><br>  MappedStatement.<span class="hljs-type">Builder</span> <span class="hljs-variable">statementBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappedStatement</span>.Builder(configuration, id, sqlSource, sqlCommandType)<br>      .resource(resource)<br>      .fetchSize(fetchSize)<br>      .timeout(timeout)<br>      .statementType(statementType)<br>      .keyGenerator(keyGenerator)<br>      .keyProperty(keyProperty)<br>      .keyColumn(keyColumn)<br>      .databaseId(databaseId)<br>      .lang(lang)<br>      .resultOrdered(resultOrdered)<br>      .resultSets(resultSets)<br>      .resultMaps(getStatementResultMaps(resultMap, resultType, id))<br>      .resultSetType(resultSetType)<br>      .flushCacheRequired(valueOrDefault(flushCache, !isSelect))<br>      .useCache(valueOrDefault(useCache, isSelect))<br>      .cache(currentCache);<br><br>  <span class="hljs-type">ParameterMap</span> <span class="hljs-variable">statementParameterMap</span> <span class="hljs-operator">=</span> getStatementParameterMap(parameterMap, parameterType, id);<br>  <span class="hljs-keyword">if</span> (statementParameterMap != <span class="hljs-literal">null</span>) &#123;<br>    statementBuilder.parameterMap(statementParameterMap);<br>  &#125;<br>  <span class="hljs-comment">//使用建造者模式创建一个mappedStatment</span><br>  <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> statementBuilder.build();<br>  <span class="hljs-comment">//将mappedStatment注册到configuration</span><br>  configuration.addMappedStatement(statement);<br>  <span class="hljs-keyword">return</span> statement;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上就是生成MappedStatement的过程。但是还没完，*mapper.java还没有和*mapper.xml对应的sql绑定起来。接下来就是绑定过程了。</p><h1 id="四、Mapper-接口绑定"><a href="#四、Mapper-接口绑定" class="headerlink" title="四、Mapper 接口绑定"></a>四、Mapper 接口绑定</h1><p>返回到XMLMapperBuilder的parse()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-comment">//判断是否已经加载该配置文件</span><br>   <span class="hljs-keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;<br>       configurationElement(parser.evalNode(<span class="hljs-string">&quot;/mapper&quot;</span>));<span class="hljs-comment">//处理mapper节点</span><br>       configuration.addLoadedResource(resource);<span class="hljs-comment">//将mapper文件添加到configuration.loadedResources中</span><br>       bindMapperForNamespace();<span class="hljs-comment">//注册mapper接口</span><br>   &#125;<br>   <span class="hljs-comment">//处理解析失败的ResultMap节点</span><br>   parsePendingResultMaps();<br>   <span class="hljs-comment">//处理解析失败的CacheRef节点</span><br>   parsePendingCacheRefs();<br>   <span class="hljs-comment">//处理解析失败的Sql语句节点</span><br>   parsePendingStatements();<br>&#125;<br></code></pre></td></tr></table></figure><p>主要关注这个方法bindMapperForNamespace().</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注册mapper接口</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindMapperForNamespace</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//获取命名空间</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">namespace</span> <span class="hljs-operator">=</span> builderAssistant.getCurrentNamespace();<br>    <span class="hljs-keyword">if</span> (namespace != <span class="hljs-literal">null</span>) &#123;<br>        Class&lt;?&gt; boundType = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过命名空间获取mapper接口的class对象</span><br>            boundType = Resources.classForName(namespace);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-comment">//ignore, bound type is not required</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (boundType != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!configuration.hasMapper(boundType)) &#123;<span class="hljs-comment">//是否已经注册过该mapper接口？</span><br>                <span class="hljs-comment">// Spring may not know the real resource name so we set a flag</span><br>                <span class="hljs-comment">// to prevent loading again this resource from the mapper interface</span><br>                <span class="hljs-comment">// look at MapperAnnotationBuilder#loadXmlResource</span><br>                <span class="hljs-comment">//将命名空间添加至configuration.loadedResource集合中</span><br>                configuration.addLoadedResource(<span class="hljs-string">&quot;namespace:&quot;</span> + namespace);<br>                <span class="hljs-comment">//将mapper接口添加到mapper注册中心</span><br>                configuration.addMapper(boundType);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>绑定完正常的节点后，还要处理一些不正常的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//处理解析失败的ResultMap节点</span><br>parsePendingResultMaps();<br><span class="hljs-comment">//处理解析失败的CacheRef节点</span><br>parsePendingCacheRefs();<br><span class="hljs-comment">//处理解析失败的Sql语句节点</span><br>parsePendingStatements();<br></code></pre></td></tr></table></figure><p>比如这种cacheRef标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 映射文件1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.dao.Mapper1&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引用映射文件2中配置的缓存 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache-ref</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.dao.Mapper2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 映射文件2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.enjoylearning.mybatis.dao.Mapper2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>Game over.</p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】参数解析</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、几种入参形式"><a href="#一、几种入参形式" class="headerlink" title="一、几种入参形式"></a>一、几种入参形式</h1><p>这里只分析带有入参的方法。</p><h2 id="1-单个入参"><a href="#1-单个入参" class="headerlink" title="1.单个入参"></a>1.单个入参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">UserInfo <span class="hljs-title function_">selectByPrimaryKey</span><span class="hljs-params">(String id)</span>;<br></code></pre></td></tr></table></figure><h2 id="2-多个入参"><a href="#2-多个入参" class="headerlink" title="2.多个入参"></a>2.多个入参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;UserInfo&gt; <span class="hljs-title function_">getByOpenIdAndUsername2</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;openid&quot;)</span> String openId, <span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br></code></pre></td></tr></table></figure><h2 id="3-入参为实体对象"><a href="#3-入参为实体对象" class="headerlink" title="3.入参为实体对象"></a>3.入参为实体对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;UserInfo&gt; <span class="hljs-title function_">getByOpenIdAndUsername3</span><span class="hljs-params">(UserInfo userInfo)</span>;<br></code></pre></td></tr></table></figure><h2 id="4-入参为Map"><a href="#4-入参为Map" class="headerlink" title="4.入参为Map"></a>4.入参为Map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;UserInfo&gt; <span class="hljs-title function_">getByOpenIdAndUsername</span><span class="hljs-params">(Map&lt;String, Object&gt; params)</span>;<br></code></pre></td></tr></table></figure><h1 id="二、mybatis执行入口"><a href="#二、mybatis执行入口" class="headerlink" title="二、mybatis执行入口"></a>二、mybatis执行入口</h1><p>还是以之前的一个例子来进入我们今天的正题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 快速入门</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickStart</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//--------------------第二阶段---------------------------</span><br>    <span class="hljs-comment">// 2.获取sqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">// 3.获取对应mapper</span><br>    <span class="hljs-type">UserInfoMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserInfoMapper.class);<br>    <span class="hljs-comment">//--------------------第三阶段---------------------------</span><br>    <span class="hljs-comment">// 4.执行查询语句并返回单条数据</span><br>    <span class="hljs-type">UserInfo</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectByPrimaryKey(<span class="hljs-string">&quot;1&quot;</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们执行到这一行时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">UserInfoMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserInfoMapper.class);<br></code></pre></td></tr></table></figure><p>通过调试我们可以看到，这个mapper其实是通过MapperProxy代理执行的。我们拿到的其实就是个动态代理对象。如下图：<br><img src="https://img-blog.csdnimg.cn/20210314204651483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>当我们执行查询时，进入MapperProxy动态代理过程。<br><img src="https://img-blog.csdnimg.cn/2021031420510518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>最终交由MapperMethod类的execute()方法执行，源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三步翻译在此完成</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">(SqlSession sqlSession, Object[] args)</span> &#123;<br>  Object result;<br>  <span class="hljs-comment">//第一步 根据sql语句类型以及接口返回的参数选择调用不同的方法</span><br>  <span class="hljs-keyword">switch</span> (command.getType()) &#123;<br>    <span class="hljs-keyword">case</span> INSERT: &#123;<br>  <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>      result = rowCountResult(sqlSession.insert(command.getName(), param));<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> UPDATE: &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>      result = rowCountResult(sqlSession.update(command.getName(), param));<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> DELETE: &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>      result = rowCountResult(sqlSession.delete(command.getName(), param));<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">case</span> SELECT:<br>      <span class="hljs-keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;<span class="hljs-comment">//返回值为void</span><br>        executeWithResultHandler(sqlSession, args);<br>        result = <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsMany()) &#123;<span class="hljs-comment">//返回值为集合或者数组</span><br>        result = executeForMany(sqlSession, args);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsMap()) &#123;<span class="hljs-comment">//返回值为map</span><br>        result = executeForMap(sqlSession, args);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsCursor()) &#123;<span class="hljs-comment">//返回值为游标</span><br>        result = executeForCursor(sqlSession, args);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//处理返回为单一对象的情况</span><br>        <span class="hljs-comment">//通过参数解析器解析解析参数</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<span class="hljs-comment">//第三步翻译，将入参转化成Map</span><br>        result = sqlSession.selectOne(command.getName(), param);<br>        <span class="hljs-keyword">if</span> (method.returnsOptional() &amp;&amp;<br>            (result == <span class="hljs-literal">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;<br>          result = OptionalUtil.ofNullable(result);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> FLUSH:<br>      result = sqlSession.flushStatements();<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Unknown execution method for: &quot;</span> + command.getName());<br>  &#125;<br>  <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Mapper method &#x27;&quot;</span> + command.getName()<br>        + <span class="hljs-string">&quot; attempted to return null from a method with a primitive return type (&quot;</span> + method.getReturnType() + <span class="hljs-string">&quot;).&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，本章参数解析的过程，我们重点关注这个方法即可，这个方法就是convertArgsToSqlCommandParam。它其实是方法的参数解析器ParamNameResolver的getNamedParams()方法完成的。<br><img src="https://img-blog.csdnimg.cn/20210314205954450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>而这个ParamNameResolver则是在MapperProxy获取mapperMethod时（先不说从cache中取）进行初始化的，<br><img src="https://img-blog.csdnimg.cn/20210314211304810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210314211424528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210314211600469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>而ParamNameResolver实例化时，主要工作就是进行初步的映射关系存储，其字段names是一个SortedMap，存储了参数名的顺序映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * &lt;p&gt;</span><br><span class="hljs-comment">   * The key is the index and the value is the name of the parameter.&lt;br /&gt;</span><br><span class="hljs-comment">   * The name is obtained from &#123;<span class="hljs-doctag">@link</span> Param&#125; if specified. When &#123;<span class="hljs-doctag">@link</span> Param&#125; is not specified,</span><br><span class="hljs-comment">   * the parameter index is used. Note that this index could be different from the actual index</span><br><span class="hljs-comment">   * when the method has special parameters (i.e. &#123;<span class="hljs-doctag">@link</span> RowBounds&#125; or &#123;<span class="hljs-doctag">@link</span> ResultHandler&#125;).</span><br><span class="hljs-comment">   * &lt;/p&gt;</span><br><span class="hljs-comment">   * &lt;ul&gt;</span><br><span class="hljs-comment">   * &lt;li&gt;aMethod(<span class="hljs-doctag">@Param</span>(&quot;M&quot;) int a, <span class="hljs-doctag">@Param</span>(&quot;N&quot;) int b) -&amp;gt; &#123;&#123;0, &quot;M&quot;&#125;, &#123;1, &quot;N&quot;&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-comment">   * &lt;li&gt;aMethod(int a, int b) -&amp;gt; &#123;&#123;0, &quot;0&quot;&#125;, &#123;1, &quot;1&quot;&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-comment">   * &lt;li&gt;aMethod(int a, RowBounds rb, int b) -&amp;gt; &#123;&#123;0, &quot;0&quot;&#125;, &#123;2, &quot;1&quot;&#125;&#125;&lt;/li&gt;</span><br><span class="hljs-comment">   * &lt;/ul&gt;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SortedMap&lt;Integer, String&gt; names;<br></code></pre></td></tr></table></figure><p>继续看getNamedParams（）方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将多个参数封装成MAP</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNamedParams</span><span class="hljs-params">(Object[] args)</span> &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">paramCount</span> <span class="hljs-operator">=</span> names.size();<br>  <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span> || paramCount == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> args[names.firstKey()];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamMap</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) &#123;<br>      param.put(entry.getValue(), args[entry.getKey()]);<br>      <span class="hljs-comment">// add generic param names (param1, param2, ...)</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">genericParamName</span> <span class="hljs-operator">=</span> GENERIC_NAME_PREFIX + String.valueOf(i + <span class="hljs-number">1</span>);<br>      <span class="hljs-comment">// ensure not to overwrite parameter named with @Param</span><br>      <span class="hljs-keyword">if</span> (!names.containsValue(genericParamName)) &#123;<br>        param.put(genericParamName, args[entry.getKey()]);<br>      &#125;<br>      i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> param;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本例子中，由于无@Param注解，所以在第二个else if那里就返回了。</p><h1 id="三、参数解析流程"><a href="#三、参数解析流程" class="headerlink" title="三、参数解析流程"></a>三、参数解析流程</h1><p>以下面的代码为例，其他形式的入参大同小异。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testManyParamQuery</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 2.获取sqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">// 3.获取对应mapper</span><br>    <span class="hljs-type">UserInfoMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserInfoMapper.class);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zyx&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">openId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zyxelva&quot;</span>;<br><br>    <span class="hljs-comment">// 第一种方式使用map</span><br>    Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    params.put(<span class="hljs-string">&quot;username&quot;</span>, username);<br>    params.put(<span class="hljs-string">&quot;openid&quot;</span>, openId);<br>    List&lt;UserInfo&gt; list1 = mapper.getByUsernameAndOpenId(params);<br>    System.out.println(list1);<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的mapper.xml方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getByUsernameAndOpenId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span><br>   select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>/&gt;</span><br>    from user_info <br>    where username=#&#123;username&#125; and openid=#&#123;openid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们从方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;UserInfo&gt; list1 = mapper.getByUsernameAndOpenId(params);<br></code></pre></td></tr></table></figure><p>开始断点调试。我们看到，进入到了MapperProxy的动态代理过程。直接进入mapperMethod.execute(sqlSession, args);</p><p><img src="https://img-blog.csdnimg.cn/20210315111605602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>来到MapperMethod中的execute方法中。由于我们的例子是查询操作，故进入Select。又例子的返回类型是List,故进入第二个if语句中。<br><img src="https://img-blog.csdnimg.cn/20210315111929562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210315112106406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>进入方法executeForMany(). 没有分页，所以进入else语句中。而convertArgsToSqlCommandParam方法我们在二中已经分析了，这里不再具体梳理。<br><img src="https://img-blog.csdnimg.cn/20210315112219141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>进入DefaultSQLSession的selectList方法中。可以看下statement实际形式是namespace+id，就可以从MappedStatement中获取。<br><img src="https://img-blog.csdnimg.cn/20210315112604497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>而MappedStatement也有很多信息，主要是<select>标签以及该节点其他重要的属性。<br><img src="https://img-blog.csdnimg.cn/20210315113216306.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>而sql的实际执行者，则为Executor. 代理对象执行方法被拦截器拦截，执行以下方法。<br><img src="https://img-blog.csdnimg.cn/20210315113629172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>先看看getBoundSql干了啥：<br><img src="https://img-blog.csdnimg.cn/20210315135210374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210315135542105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>进入RawSqlSource,因例子的sql无${},无动态SQL节点。<br><img src="https://img-blog.csdnimg.cn/20210315140041749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>先看看RawSqlSource的构造方法，看看#{}是怎么替换成?的，发现主要是SqlSourceBuilder在干活儿。<br><img src="https://img-blog.csdnimg.cn/20210315141654652.png"><br><img src="https://img-blog.csdnimg.cn/20210315141735671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>主要看GenericTokenParser.parse().该方法主要完成占位符的定位工作，然后把占位符的替换工作交给与其关联的 TokenHandler 处理.<br><img src="https://img-blog.csdnimg.cn/20210315142304221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>TokenHandler有四个小弟，<br><img src="https://img-blog.csdnimg.cn/20210315142425559.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>BindingTokenParser：该对象的handleToken方法会取出占位符中的变量，然后使用该变量作为键去上下文环境中寻找对应的值。之后，会用找到的值替换占位符。因此，该对象可以完成占位符的替换工作；<br>DynamicCheckerTokenParser：该对象的 handleToken 方法会置位成员属性isDynamic。因此该对象可以记录自身是否遇到过占位符。<br>ParameterMappingTokenHandler：将DynamicSqlSource和RawSqlSource中的“#{}”符号替换掉，从而将他们转化为StaticSqlSource；<br>VariableTokenHandler：handleToken方法中传入输入参数后，该方法会以输入参数为键尝试从variables属性中寻找对应的值返回。<br><img src="https://img-blog.csdnimg.cn/20210315140144135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>到此BoundSql的解析过程基本结束。getBoundSql方法执行完后，我们再看看一级缓存的key生成策略。<br><img src="https://img-blog.csdnimg.cn/20210315140541909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20210315140853968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"></select></p><p>可以看出，cacheKey由namespace的id,分页参数，sql语句，入参以及<environment>节点的信息组成。<br>回到查询过程，实际执行的方法为<br><img src="https://img-blog.csdnimg.cn/20210315113709359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>而首次查询不会进入if语句，调用BaseExecutor的方法：<br><img src="https://img-blog.csdnimg.cn/20210315113913105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>本地缓存没有结果，故需要查询数据库，进入queryFromDatabase().<br><img src="https://img-blog.csdnimg.cn/20210315114121102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>doQuery()则调用的为SimpleExecutor的方法。<br><img src="https://img-blog.csdnimg.cn/20210315114350394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>看看newStatementHandler()。<br><img src="https://img-blog.csdnimg.cn/20210315114428448.png"><br><img src="https://img-blog.csdnimg.cn/20210315114501949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>由于我们的例子当中sql带有#{}，故进入PREPARED，生成PreparedStatementHandler。<br>执行完语句后，放入一级缓存。<br><img src="https://img-blog.csdnimg.cn/20210315115037492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70"><br>后续就是结果映射执行过程，这里不再赘述，后续跟上。</environment></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>本章主要讲述了mybatis参数解析的过程，重点跟踪了执行sql时，变量占位符${}以及参数占位符#{}的替换和解析过程。实际开发过程中，要注意这两者的区别，能用#{}的地方尽量用#。而${}主要用于order by语句、原生jdbc、表名作参数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】代理阶段</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E4%BB%A3%E7%90%86%E9%98%B6%E6%AE%B5/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E4%BB%A3%E7%90%86%E9%98%B6%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Mybatis-的接口层"><a href="#一、Mybatis-的接口层" class="headerlink" title="一、Mybatis 的接口层"></a>一、Mybatis 的接口层</h1><h2 id="1-SqlSession"><a href="#1-SqlSession" class="headerlink" title="1.SqlSession"></a>1.SqlSession</h2><p>sqlSession总结<br><img src="https://img-blog.csdnimg.cn/20210312101600300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图1"><br>总之一句话：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">/**<br> * The primary Java interface for working with MyBatis.<br> * Through this interface you can<span class="hljs-built_in"> execute </span>commands, get mappers<span class="hljs-built_in"> and </span>manage transactions.<br> *<br> * @author Clinton Begin<br> */<br></code></pre></td></tr></table></figure><p>翻译过来，就是：对外访问统一的接口，通过这些接口，完成读写命令，获取映射和管理事务。</p><p>UML：<br><img src="https://img-blog.csdnimg.cn/20210312102149880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图2"><br>SqlSession查询接口嵌套关系<br><img src="https://img-blog.csdnimg.cn/20210312102442855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="SqlSession查询接口嵌套关系"></p><h2 id="2-SqlSessionFactory"><a href="#2-SqlSessionFactory" class="headerlink" title="2.SqlSessionFactory"></a>2.SqlSessionFactory</h2><p>SqlSessionFactory与SqlSession关系UML图<br><img src="https://img-blog.csdnimg.cn/20210312103052478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="SqlSessionFactory与SqlSession关系UML图"><br>SqlSessionFactory 使用工厂模式创建SqlSession，其默认的实现类为DefaultSqlSessionFactory，其中获取SqlSession 的核心方法为openSessionFromDataSource(ExecutorType, TransactionIsolationLevel, boolean)，在这个方法中从configuration 中获取的TransactionFactory 是典型的策略模式的应用。运行期，TransactionFactory 接口的实现，是由配置文件配置决定的，可配置选项包括：JDBC、Managed，可根据需求灵活的替换TransactionFactory 的实现。</p><h1 id="二、binding-模块分析"><a href="#二、binding-模块分析" class="headerlink" title="二、binding 模块分析"></a>二、binding 模块分析</h1><h2 id="0-MyBatis两种编程模型"><a href="#0-MyBatis两种编程模型" class="headerlink" title="0.MyBatis两种编程模型"></a>0.MyBatis两种编程模型</h2><p>(1) 使用mapper接口编程，就可以访问数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 程序员喜欢的风格</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickStart</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 2.获取sqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">// 3.获取对应mapper</span><br>    <span class="hljs-type">TUserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TUserMapper.class);<br>    <span class="hljs-comment">// 4.执行查询语句并返回单条数据</span><br>    <span class="hljs-type">TUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectByPrimaryKey(<span class="hljs-number">2</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p>(2) 使用sqlsession对外提供数据库的访问；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 原始风格，ibatis编程模型 本质分析</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">originalOperation</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 2.获取sqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">// 3.执行查询语句并返回结果</span><br>    <span class="hljs-type">TUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;com.taeyeon.mybatis.mapper.TUserMapper.selectByPrimaryKey&quot;</span>, <span class="hljs-number">2</span>);<br>    System.out.println(user.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>可以比较以下两种编程风格，发现，直接使用SqlSession 进行数据库开发存在代码可读性差、可维护性差的问题，所以我们很少使用，而是使用Mapper接口的方式进行数据库的开发。实现的基础涉及配置文件的解读以及动态代理的运用。</p><h2 id="1-核心类"><a href="#1-核心类" class="headerlink" title="1.核心类"></a>1.核心类</h2><p><img src="https://img-blog.csdnimg.cn/20210312105114200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图3"></p><h2 id="2-运行流程"><a href="#2-运行流程" class="headerlink" title="2.运行流程"></a>2.运行流程</h2><p><img src="https://img-blog.csdnimg.cn/20210312105706612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图4"></p><h1 id="三、举个栗子"><a href="#三、举个栗子" class="headerlink" title="三、举个栗子"></a>三、举个栗子</h1><p>demo如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-comment">// 程序员喜欢的风格</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickStart</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 2.获取sqlSession</span><br>    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>    <span class="hljs-comment">// 3.获取对应mapper</span><br>    <span class="hljs-type">TUserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(TUserMapper.class);<br>    <span class="hljs-comment">// 4.执行查询语句并返回单条数据</span><br>    <span class="hljs-type">TUser</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.selectByPrimaryKey(<span class="hljs-number">2</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-打开一个会话"><a href="#1-打开一个会话" class="headerlink" title="1.打开一个会话"></a>1.打开一个会话</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br></code></pre></td></tr></table></figure><h2 id="2-DefaultSqlSessionFactory"><a href="#2-DefaultSqlSessionFactory" class="headerlink" title="2.DefaultSqlSessionFactory"></a>2.DefaultSqlSessionFactory</h2><p>有两个实现类，主要看DefaultSqlSessionFactory.<br><img src="https://img-blog.csdnimg.cn/2021031211034090.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图5"></p><p>点进去看看openSession的方法内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>关键瞧瞧openSessionFromDataSource这个方法干了什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 从数据源获取数据库连接</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> execType   执行类型，ExecutorType主要有三种类型：SIMPLE, REUSE, BATCH，默认是SIMPLE，都在枚举类ExecutorType里面</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> level      事务隔离级别，都在枚举类TransactionIsolationLevel中定义</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> autoCommit 是否自动提交，主要是事务提交的设置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> SqlSession</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> SqlSession <span class="hljs-title function_">openSessionFromDataSource</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>   <span class="hljs-type">Transaction</span> <span class="hljs-variable">tx</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>   <span class="hljs-comment">//获取mybatis配置文件中的environment对象</span><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> configuration.getEnvironment();<br>     <span class="hljs-comment">//从environment获取transactionFactory对象</span><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">transactionFactory</span> <span class="hljs-operator">=</span> getTransactionFactoryFromEnvironment(environment);<br>     <span class="hljs-comment">//创建事务对象</span><br>     tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br>     <span class="hljs-comment">//根据配置创建executor</span><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> configuration.newExecutor(tx, execType);<br>     <span class="hljs-comment">//创建DefaultSqlSession</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>     <span class="hljs-comment">// may have fetched a connection so lets call close()</span><br>     closeTransaction(tx);<br>     <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>   &#125; <span class="hljs-keyword">finally</span> &#123;<br>     ErrorContext.instance().reset();<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>重点看看新创建的执行器和DefaultSqlSession。</p><h2 id="3-newExecutor"><a href="#3-newExecutor" class="headerlink" title="3.newExecutor"></a>3.newExecutor</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">newExecutor</span><span class="hljs-params">(Transaction transaction, ExecutorType executorType)</span> &#123;<br>    executorType = executorType == <span class="hljs-literal">null</span> ? defaultExecutorType : executorType;<br>    executorType = executorType == <span class="hljs-literal">null</span> ? ExecutorType.SIMPLE : executorType;<br>    Executor executor;<br>    <span class="hljs-comment">//BatchExecutor、SimpleExecutor和CachingExecutor三者之一</span><br>    <span class="hljs-keyword">if</span> (ExecutorType.BATCH == executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BatchExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ExecutorType.REUSE == executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReuseExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>    &#125;<br>    <span class="hljs-comment">//如果有&lt;cache&gt;节点，通过装饰器，添加二级缓存的能力</span><br>    <span class="hljs-keyword">if</span> (cacheEnabled) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachingExecutor</span>(executor);<br>    &#125;<br>    <span class="hljs-comment">//通过interceptorChain遍历所有的插件为executor增强，添加插件的功能</span><br>    executor = (Executor) interceptorChain.pluginAll(executor);<br>    <span class="hljs-keyword">return</span> executor;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="4-DefaultSqlSession"><a href="#4-DefaultSqlSession" class="headerlink" title="4.DefaultSqlSession"></a>4.DefaultSqlSession</h2><p>再去瞄下DefaultSqlSession干了啥。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultSqlSession</span><span class="hljs-params">(Configuration configuration, Executor executor, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>  <span class="hljs-built_in">this</span>.configuration = configuration;<br>  <span class="hljs-built_in">this</span>.executor = executor;<br>  <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">false</span>;<br>  <span class="hljs-built_in">this</span>.autoCommit = autoCommit;<br>&#125;<br></code></pre></td></tr></table></figure><p>DefaultSqlSession实现了SqlSession的方法。<br><img src="https://img-blog.csdnimg.cn/20210312111811946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图6"><br>当执行以下代码时，调用的其实就是DefaultSqlSession类的selectOne方法（最终调用该类下的selectList方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>  <span class="hljs-comment">// Popular vote was to return null on 0 results and throw exception on too many.</span><br>  List&lt;T&gt; list = <span class="hljs-built_in">this</span>.&lt;T&gt;selectList(statement, parameter);<br>  <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TooManyResultsException</span>(<span class="hljs-string">&quot;Expected one result (or null) to be returned by selectOne(), but found: &quot;</span> + list.size());<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//从configuration中获取要执行的sql语句的配置信息</span><br>    <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(statement);<br>    <span class="hljs-comment">//通过executor执行语句，并返回指定的结果集</span><br>    <span class="hljs-keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error querying database.  Cause: &quot;</span> + e, e);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    ErrorContext.instance().reset();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Executor"><a href="#5-Executor" class="headerlink" title="5.Executor"></a>5.Executor</h2><p>先大致了解下Executor的类继承关系。<br><img src="https://img-blog.csdnimg.cn/20210312112927579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图7"><br>所以，我们重点看看这段代码的奥秘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br></code></pre></td></tr></table></figure><p>先看BaseExecutor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><span class="hljs-comment">//获取sql语句信息，包括占位符，参数等信息</span><br>  <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> ms.getBoundSql(parameter);<br>  <span class="hljs-comment">//拼装缓存的key值，这里后续讲讲key的生成规则</span><br>  <span class="hljs-type">CacheKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> createCacheKey(ms, parameter, rowBounds, boundSql);<br>  <span class="hljs-keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>  ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing a query&quot;</span>).object(ms.getId());<br>  <span class="hljs-keyword">if</span> (closed) &#123;<span class="hljs-comment">//检查当前executor是否关闭</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;<span class="hljs-comment">//非嵌套查询，并且FlushCache配置为true，则需要清空一级缓存</span><br>    clearLocalCache();<br>  &#125;<br>  List&lt;E&gt; list;<br>  <span class="hljs-keyword">try</span> &#123;<br>    queryStack++;<span class="hljs-comment">//查询层次加一</span><br>    list = resultHandler == <span class="hljs-literal">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-literal">null</span>;<span class="hljs-comment">//查询以及缓存</span><br>    <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">null</span>) &#123;<br>   <span class="hljs-comment">//针对调用存储过程的结果处理</span><br>      handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-comment">//缓存未命中，从数据库加载数据</span><br>      list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>    &#125;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    queryStack--;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;<span class="hljs-comment">//延迟加载处理</span><br>      deferredLoad.load();<br>    &#125;<br>    <span class="hljs-comment">// issue #601</span><br>    deferredLoads.clear();<br>    <span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<span class="hljs-comment">//如果当前sql的一级缓存配置为STATEMENT，查询完既清空一集缓存</span><br>      <span class="hljs-comment">// issue #482</span><br>      clearLocalCache();<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先看缓存未命中的部分，即queryFromDatabase方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//真正访问数据库获取结果的方法</span><br><span class="hljs-keyword">private</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">queryFromDatabase</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>  List&lt;E&gt; list;<br>  localCache.putObject(key, EXECUTION_PLACEHOLDER);<span class="hljs-comment">//在缓存中添加占位符</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//调用抽象方法doQuery，方法查询数据库并返回结果，可选的实现包括：simple、reuse、batch</span><br>    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    localCache.removeObject(key);<span class="hljs-comment">//在缓存中删除占位符</span><br>  &#125;<br>  localCache.putObject(key, list);<span class="hljs-comment">//将真正的结果对象添加到一级缓存</span><br>  <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<span class="hljs-comment">//如果是调用存储过程</span><br>    localOutputParameterCache.putObject(key, parameter);<span class="hljs-comment">//缓存输出类型结果参数</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>其最终调用SimpleExecutor的doQuery方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-comment">//查询的实现</span><br><span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>  <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//获取configuration对象</span><br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>    <span class="hljs-comment">//创建StatementHandler对象，</span><br>    <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);<br>    <span class="hljs-comment">//StatementHandler对象创建stmt,并使用parameterHandler对占位符进行处理</span><br>    stmt = prepareStatement(handler, ms.getStatementLog());<br>    <span class="hljs-comment">//通过statementHandler对象调用ResultSetHandler将结果集转化为指定对象返回</span><br>    <span class="hljs-keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    closeStatement(stmt);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看看doQuery方法的内部执行步骤：<br>（1）获取配置信息对象。<br>（2）通过配置对象获取一个新的StatementHandler，该类主要用来处理一次SQL操作。<br>（3）预处理StatementHandler对象，得到Statement对象。<br>（4）传入Statement和结果处理对象，通过StatementHandler的query方法来执行SQL，并对执行结果进行处理。</p><p>先看看newStatementHandler干了啥。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> StatementHandler <span class="hljs-title function_">newStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br><span class="hljs-comment">//创建RoutingStatementHandler对象，实际由statmentType来指定真实的StatementHandler来实现</span><br><span class="hljs-type">StatementHandler</span> <span class="hljs-variable">statementHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoutingStatementHandler</span>(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);<br><span class="hljs-comment">//加入插件</span><br>  statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);<br>  <span class="hljs-keyword">return</span> statementHandler;<br>&#125;<br></code></pre></td></tr></table></figure><p>瞧瞧StatementHandler的小弟们。<br><img src="https://img-blog.csdnimg.cn/20210312114334576.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图8"><br>总结下StatementHandler是干啥的，以及它的小弟们分别能干啥。<br><img src="https://img-blog.csdnimg.cn/20210312114441395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图9"></p><p>再看看prepare干了啥。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stmt = handler.prepare(connection, transaction.getTimeout());<br></code></pre></td></tr></table></figure><p>主要是BaseStatementHandler干活儿.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-comment">//使用模板模式，定义了获取Statement的步骤，其子类实现实例化Statement的具体的方式；</span><br><span class="hljs-keyword">public</span> Statement <span class="hljs-title function_">prepare</span><span class="hljs-params">(Connection connection, Integer transactionTimeout)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>  ErrorContext.instance().sql(boundSql.getSql());<br>  <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//通过不同的子类实例化不同的Statement，分为三类：simple(statement)、prepare(prepareStatement)、callable(CallableStatementHandler)</span><br>    statement = instantiateStatement(connection);<br>    <span class="hljs-comment">//设置超时时间</span><br>    setStatementTimeout(statement, transactionTimeout);<br>    <span class="hljs-comment">//设置数据集大小</span><br>    setFetchSize(statement);<br>    <span class="hljs-keyword">return</span> statement;<br>  &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>    closeStatement(statement);<br>    <span class="hljs-keyword">throw</span> e;<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    closeStatement(statement);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error preparing statement.  Cause: &quot;</span> + e, e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  最后执行query方法<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">handler.&lt;E&gt;query(stmt, resultHandler);<br></code></pre></td></tr></table></figure><br>获得结果集。（这里面有结果集的处理，后续再讲。）</p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis源码学习】初始化阶段</title>
    <link href="/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B6%E6%AE%B5/"/>
    <url>/2023/04/30/%E3%80%90Mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E3%80%91%E5%88%9D%E5%A7%8B%E5%8C%96%E9%98%B6%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="一、核心配置类"><a href="#一、核心配置类" class="headerlink" title="一、核心配置类"></a>一、核心配置类</h1><p>XMLConfigBuilder： 主要负责解析mybatis-config.xml；<br>XMLMapperBuilder： 主要负责解析映射配置Mapper.xml 文件；<br>XMLStatementBuilder： 主要负责解析映射配置文件中的SQL 节点<br>三者之间的关系，如下图<br><img src="https://img-blog.csdnimg.cn/20210311160137766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="核心配置类三剑客关系图"></p><h2 id="1-XMLConfigBuilder"><a href="#1-XMLConfigBuilder" class="headerlink" title="1.XMLConfigBuilder"></a>1.XMLConfigBuilder</h2><p>主要负责解析mybatis关键配置文件mybatis-config.xml，重点关注91行，全局唯一初始化的大配置类。<img src="https://img-blog.csdnimg.cn/20210311161114699.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图1"><br>面试题经常会问，为啥mybatis的配置类Configuration是单例的？首先我们在BaseBuilder中发现它是final类型的，其次91行是全局唯一初始化它的地方。<br><img src="https://img-blog.csdnimg.cn/20210311161415639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图2"></p><h2 id="2-XMLMapperBuilder"><a href="#2-XMLMapperBuilder" class="headerlink" title="2.XMLMapperBuilder"></a>2.XMLMapperBuilder</h2><p>负责解析<em>mapper.xml和</em>mapper.java文件，关键代码<br><img src="https://img-blog.csdnimg.cn/2021031116211879.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图3"><br>重点关注下configurationElement方法<br><img src="https://img-blog.csdnimg.cn/20210311162203404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图4"></p><h2 id="3-XMLStatementBuilder"><a href="#3-XMLStatementBuilder" class="headerlink" title="3.XMLStatementBuilder"></a>3.XMLStatementBuilder</h2><p>主要负责解析*mapper.xml中的select、insert、update、delete标签语句。重点关注下这个方法<br><img src="https://img-blog.csdnimg.cn/2021031116252489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图5"></p><h2 id="4-Configuration"><a href="#4-Configuration" class="headerlink" title="4.Configuration"></a>4.Configuration</h2><p><img src="https://img-blog.csdnimg.cn/20210311162859567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlemFkZQ==,size_16,color_FFFFFF,t_70" alt="图6"></p><h1 id="二、源码追踪初始化流程"><a href="#二、源码追踪初始化流程" class="headerlink" title="二、源码追踪初始化流程"></a>二、源码追踪初始化流程</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisDemo</span> &#123;<br><span class="hljs-keyword">private</span> SqlSessionFactory sqlSessionFactory;<br><br><span class="hljs-meta">@Before</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//--------------------第一阶段---------------------------</span><br>    <span class="hljs-comment">// 1.1 读取mybatis配置文件创SqlSessionFactory</span><br><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br><span class="hljs-comment">// 1.2 读取mybatis配置文件创SqlSessionFactory</span><br>sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>inputStream.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-源码分析"><a href="#2-源码分析" class="headerlink" title="2.源码分析"></a>2.源码分析</h2><h3 id="2-1-第一阶段"><a href="#2-1-第一阶段" class="headerlink" title="2.1.第一阶段"></a>2.1.第一阶段</h3><h4 id="2-1-1-生成SqlSessionFactory"><a href="#2-1-1-生成SqlSessionFactory" class="headerlink" title="2.1.1.生成SqlSessionFactory"></a>2.1.1.生成SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.1 读取mybatis配置文件创SqlSessionFactory</span><br><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br></code></pre></td></tr></table></figure><p>读取Mybaits的主配置配置文件，并返回该文件的输入流，我们知道Mybatis所有的SQL语句都写在XML配置文件里面,所以第一步就需要读取这些XML配置文件，这个不难理解，关键是读取文件后怎么存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.2 读取mybatis配置文件创SqlSessionFactory</span><br>sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br></code></pre></td></tr></table></figure><p>读取配置文件流并将这些配置信息存放到Configuration类中.</p><h4 id="2-1-2-解析配置，生成configuration对象"><a href="#2-1-2-解析配置，生成configuration对象" class="headerlink" title="2.1.2.解析配置，生成configuration对象"></a>2.1.2.解析配置，生成configuration对象</h4><p>重点关注下SqlSessionFactoryBuilder的build方法，主要分为两类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符流</span><br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader)</span>;<br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader, String environment)</span>;<br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader, Properties properties)</span>;<br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader, String environment, Properties properties)</span>;<br><span class="hljs-comment">//字节流</span><br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream)</span>;<br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, String environment)</span>;<br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, Properties properties)</span>;<br>SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, String environment, Properties properties)</span>;<br></code></pre></td></tr></table></figure><p>我们只看InputStream对应的build方法即可，顺带一提的是，其实我们可以通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Reader reader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream);<br></code></pre></td></tr></table></figure><p>来将Inputstream转换为Reader对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 通过字节流创建 SqlSessionFactory</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> inputStream mybatis配置文件对应的字节流（可以通过Reader reader=new InputStreamReader(inputStream);来将Inputstream转换为Reader对象）</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> environment 指定当前使用的环境标志</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> properties  用户自定义的属性对象</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> SqlSessionFactory</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, String environment, Properties properties)</span> &#123;<br>     <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-type">XMLConfigBuilder</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLConfigBuilder</span>(inputStream, environment, properties);<br>         <span class="hljs-keyword">return</span> build(parser.parse());<br>     &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>         <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error building SqlSession.&quot;</span>, e);<br>     &#125; <span class="hljs-keyword">finally</span> &#123;<br>         ErrorContext.instance().reset();<br>         <span class="hljs-keyword">try</span> &#123;<br>             inputStream.close();<br>         &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>             <span class="hljs-comment">// Intentionally ignore. Prefer previous error.</span><br>         &#125;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>点进去XMLConfigBuilder的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(XPathParser parser, String environment, Properties props)</span> &#123;<br><span class="hljs-comment">//重点地方，全局唯一构造Configuration对象的地方</span><br>    <span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>());<br>    ErrorContext.instance().resource(<span class="hljs-string">&quot;SQL Mapper Configuration&quot;</span>);<br>    <span class="hljs-built_in">this</span>.configuration.setVariables(props);<br>    <span class="hljs-built_in">this</span>.parsed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.environment = environment;<br>    <span class="hljs-built_in">this</span>.parser = parser;<br>  &#125;<br></code></pre></td></tr></table></figure><p>再去瞧瞧XMLConfigBuilder的parse方法，重点关注parseConfiguration方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Configuration <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">if</span> (parsed) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Each XMLConfigBuilder can only be used once.&quot;</span>);<br>  &#125;<br>  parsed = <span class="hljs-literal">true</span>;<br>  parseConfiguration(parser.evalNode(<span class="hljs-string">&quot;/configuration&quot;</span>));<br>  <span class="hljs-keyword">return</span> configuration;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseConfiguration</span><span class="hljs-params">(XNode root)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//issue #117 read properties first</span><br>   <span class="hljs-comment">//解析&lt;properties&gt;节点</span><br>    propertiesElement(root.evalNode(<span class="hljs-string">&quot;properties&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;settings&gt;节点</span><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">settings</span> <span class="hljs-operator">=</span> settingsAsProperties(root.evalNode(<span class="hljs-string">&quot;settings&quot;</span>));<br>    loadCustomVfs(settings);<br>    <span class="hljs-comment">//解析&lt;typeAliases&gt;节点</span><br>    typeAliasesElement(root.evalNode(<span class="hljs-string">&quot;typeAliases&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;plugins&gt;节点</span><br>    pluginElement(root.evalNode(<span class="hljs-string">&quot;plugins&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;objectFactory&gt;节点</span><br>    objectFactoryElement(root.evalNode(<span class="hljs-string">&quot;objectFactory&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;objectWrapperFactory&gt;节点</span><br>    objectWrapperFactoryElement(root.evalNode(<span class="hljs-string">&quot;objectWrapperFactory&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;reflectorFactory&gt;节点</span><br>    reflectorFactoryElement(root.evalNode(<span class="hljs-string">&quot;reflectorFactory&quot;</span>));<br>    <span class="hljs-comment">//将settings填充到configuration</span><br>    settingsElement(settings);<br>    <span class="hljs-comment">// read it after objectFactory and objectWrapperFactory issue #631</span><br>    <span class="hljs-comment">//解析&lt;environments&gt;节点</span><br>    environmentsElement(root.evalNode(<span class="hljs-string">&quot;environments&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;databaseIdProvider&gt;节点</span><br>    databaseIdProviderElement(root.evalNode(<span class="hljs-string">&quot;databaseIdProvider&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;typeHandlers&gt;节点</span><br>    typeHandlerElement(root.evalNode(<span class="hljs-string">&quot;typeHandlers&quot;</span>));<br>    <span class="hljs-comment">//解析&lt;mappers&gt;节点</span><br>    mapperElement(root.evalNode(<span class="hljs-string">&quot;mappers&quot;</span>));<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上是分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">XMLConfigBuilder</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLConfigBuilder</span>(inputStream, environment, properties);<br><span class="hljs-comment">//解析配置文件得到configuration对象，并返回SqlSessionFactory</span><br><span class="hljs-keyword">return</span> build(parser.parse()); <br></code></pre></td></tr></table></figure><p>parser.parse()的部分，下面看看build()部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Configuration config)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSessionFactory</span>(config);<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单，就是把读取配置文件后的Configuration对象赋给DefaultSqlSessionFactory，返回一个构建好的sqlSessionFactory，而DefaultSqlSessionFactory是SqlSessionFactory的默认实现. </p><h3 id="2-2-第二阶段"><a href="#2-2-第二阶段" class="headerlink" title="2.2.第二阶段"></a>2.2.第二阶段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 2.获取sqlSession</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br></code></pre></td></tr></table></figure><p>通过调用DefaultSqlSessionFactory的openSession方法返回一个SqlSession实例,我们看一下具体是怎么得到一个SqlSession实例的。首先调用openSessionFromDataSource方法。<br>摸进去看看openSessionFromDataSource():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 从数据源获取数据库连接</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> execType   执行类型，ExecutorType主要有三种类型：SIMPLE, REUSE, BATCH，默认是SIMPLE，都在枚举类ExecutorType里面</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> level      事务隔离级别，都在枚举类TransactionIsolationLevel中定义</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> autoCommit 是否自动提交，主要是事务提交的设置</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> SqlSession DefaultSqlSession是SqlSession的实现类，该类主要提供操作数据库的方法给开发人员使用</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span> SqlSession <span class="hljs-title function_">openSessionFromDataSource</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>   <span class="hljs-type">Transaction</span> <span class="hljs-variable">tx</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">try</span> &#123;<br>   <span class="hljs-comment">//获取mybatis配置文件中的environment对象,包括使用哪种数据库，连接数据库的信息，事务</span><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> configuration.getEnvironment();<br>     <span class="hljs-comment">//从environment获取transactionFactory对象</span><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">transactionFactory</span> <span class="hljs-operator">=</span> getTransactionFactoryFromEnvironment(environment);<br>     <span class="hljs-comment">//创建事务对象</span><br>     tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br>     <span class="hljs-comment">//根据配置创建executor</span><br>     <span class="hljs-keyword">final</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> configuration.newExecutor(tx, execType);<br>     <span class="hljs-comment">//创建DefaultSqlSession</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>     <span class="hljs-comment">// may have fetched a connection so lets call close()</span><br>     closeTransaction(tx);<br>     <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>   &#125; <span class="hljs-keyword">finally</span> &#123;<br>     ErrorContext.instance().reset();<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>步骤一：读取Mybatis的主配置文件，并将文件读成文件流形式(InputStream)。</p><p>步骤二：从主配置文件流中读取文件的各个节点信息并存放到Configuration对象中。读取mappers节点的引用文件，并将这些文件的各个节点信息存放到Configuration对象。</p><p>步骤三：根据Configuration对象的信息获取数据库连接，并设置连接的事务隔离级别等信息，将经过包装数据库连接对象SqlSession接口返回，DefaultSqlSession是SqlSession的实现类，所以这里返回的是DefaultSqlSession，SqlSession接口里面就是对外提供的各种数据库操作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】987.二叉树的垂序遍历</title>
    <link href="/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>给你二叉树的根结点 root ，请你设计算法计算二叉树的 垂序遍历 序列。</p><p>对位于 (row, col) 的每个结点而言，其左右子结点分别位于 (row + 1, col - 1) 和 (row + 1, col + 1) 。树的根结点位于 (0, 0) 。</p><p>二叉树的 <strong>垂序遍历</strong> 从最左边的列开始直到最右边的列结束，按列索引每一列上的所有结点，形成一个按出现位置从上到下排序的有序列表。如果同行同列上有多个结点，则按结点的值从小到大进行排序。</p><p>返回二叉树的 <strong>垂序遍历</strong> 序列。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/e04967e5622978d8f038f3f484c96344.jpeg#pic_center" alt="图1"></p><blockquote><p>输入：root &#x3D; [3,9,20,null,null,15,7]<br>输出：[[9],[3,15],[20],[7]]</p></blockquote><p><strong>解释</strong>：<br>列 -1 ：只有结点 9 在此列中。<br>列  0 ：只有结点 3 和 15 在此列中，按从上到下顺序。<br>列  1 ：只有结点 20 在此列中。<br>列  2 ：只有结点 7 在此列中。</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/928311391554fa02c32df8d2fe82f29f.jpeg#pic_center" alt="图2"></p><blockquote><p>输入：root &#x3D; [1,2,3,4,5,6,7]<br>输出：[[4],[2],[1,5,6],[3],[7]]</p></blockquote><p><strong>解释</strong>：<br>列 -2 ：只有结点 4 在此列中。<br>列 -1 ：只有结点 2 在此列中。<br>列  0 ：结点 1 、5 和 6 都在此列中。<br>          1 在上面，所以它出现在前面。<br>          5 和 6 位置都是 (2, 0) ，所以按值从小到大排序，5 在 6 的前面。<br>列  1 ：只有结点 3 在此列中。<br>列  2 ：只有结点 7 在此列中。</p><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/21f2fd6f20821d1e1279984777466b85.jpeg#pic_center" alt="图3"></p><blockquote><p>输入：root &#x3D; [1,2,3,4,6,5,7]<br>输出：[[4],[2],[1,5,6],[3],[7]]</p></blockquote><p><strong>解释</strong>：<br>这个示例实际上与示例 2 完全相同，只是结点 5 和 6 在树中的位置发生了交换。<br>因为 5 和 6 的位置仍然相同，所以答案保持不变，仍然按值从小到大排序。</p><p><strong>提示</strong>：</p><ul><li>树中结点数目总数在范围 [1, 1000] 内</li><li>0 &lt;&#x3D; Node.val &lt;&#x3D; 1000</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>从示例可以得出，最终答案是先按列号从小到大排列，列号相同再按行号从小到大，行号相同再按值从小到大输出。因而我们在遍历二叉树时需要统计各个节点(列号，行号，值)的三元组，然后按照列号、行号、值的升序排列，最后输出结果。</p><ul><li>定义一个map，key为节点，value存储该节点的列号，行号，值</li><li>深度优先算法，遍历各个节点，记录各节点 列号、行号、值，保存至map中</li><li>对map的values按照排序规则进行排序</li></ul><p><strong>复杂度</strong>：</p><ul><li>时间复杂度：令总节点数量为 n，填充哈希表时进行树的遍历，复杂度为 O(n)；构造答案时需要进行排序，复杂度为 O(nlog⁡n)。整体复杂度为 O(nlog⁡n)</li><li>空间复杂度：O(n)</li></ul><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//记录节点 列号、行号、值</span><br>    Map&lt;TreeNode, <span class="hljs-type">int</span>[]&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">verticalTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">//示例规则，先按列号从小到大排列，列号相同再按行号从小到大，行号相同再按值从小到大输出</span><br>        <span class="hljs-comment">//定义一个map,key为节点，value存储该节点的 列号，行号，值</span><br>        <span class="hljs-comment">//深度优先算法，遍历各个节点，记录各节点 列号、行号、值，保存至map中</span><br>        <span class="hljs-comment">//对map的values按照排序规则进行排序</span><br>        <br>        <span class="hljs-comment">//root - map</span><br>        map.put(root,<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,root.val&#125;);<br>        dfs(root);<br><br>        <span class="hljs-comment">//各节点 遍历的信息列表</span><br>        List&lt;<span class="hljs-type">int</span>[]&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(map.values());<br>        <span class="hljs-comment">//排序</span><br>        Collections.sort(list, (a,b)-&gt;&#123;<br>            <span class="hljs-comment">//优先按列比较</span><br>            <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]!=b[<span class="hljs-number">0</span>])&#123;<br>                <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]-b[<span class="hljs-number">0</span>];<br>            &#125;<br>            <span class="hljs-comment">//其次 按行号比较</span><br>            <span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]!=b[<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]-b[<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">//最后，按值比较</span><br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">2</span>]-b[<span class="hljs-number">2</span>];<br>        &#125;);<br><br>        <span class="hljs-comment">//遍历list，输出结果集</span><br>        List&lt;List&lt;Integer&gt;&gt; res=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;Integer&gt; tmp;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();)&#123;<br>            <span class="hljs-type">int</span> j=i;<br>            tmp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">//列号相同的</span><br>            <span class="hljs-keyword">while</span>(j&lt;list.size() &amp;&amp; list.get(j)[<span class="hljs-number">0</span>]==list.get(i)[<span class="hljs-number">0</span>])&#123;<br>                tmp.add(list.get(j)[<span class="hljs-number">2</span>]);<br>                j++;<br>            &#125;<br>            res.add(tmp);<br>            i=j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>==node)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] nodeColRowVal=map.get(node);<br>        <span class="hljs-type">int</span> nodeCol=nodeColRowVal[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> nodeRow=nodeColRowVal[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> value=nodeColRowVal[<span class="hljs-number">2</span>];<br><br>        <span class="hljs-comment">//左子树</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=node.left)&#123;<br>            map.put(node.left, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;nodeCol-<span class="hljs-number">1</span>, nodeRow+<span class="hljs-number">1</span>, node.left.val&#125;);<br>            dfs(node.left);<br>        &#125;<br><br>        <span class="hljs-comment">//右子树</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=node.right)&#123;<br>            map.put(node.right, <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;nodeCol+<span class="hljs-number">1</span>, nodeRow+<span class="hljs-number">1</span>, node.right.val&#125;);<br>            dfs(node.right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】103.二叉树的锯齿形层序遍历(之字形遍历)</title>
    <link href="/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E4%B9%8B%E5%AD%97%E5%BD%A2%E9%81%8D%E5%8E%86%EF%BC%89/"/>
    <url>/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E4%B9%8B%E5%AD%97%E5%BD%A2%E9%81%8D%E5%8E%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>给你二叉树的根节点 root ，返回其节点值的 锯齿形层序遍历 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p><p>示例 1：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1e841d2f824fe1aeb776c1755d367ca1.jpeg#pic_center" alt="图1"></p><blockquote><p>输入：root &#x3D; [3,9,20,null,null,15,7]<br>输出：[[3],[20,9],[15,7]]</p></blockquote><p>示例 2：</p><blockquote><p>输入：root &#x3D; [1]<br>输出：[[1]]</p></blockquote><p>示例 3：</p><blockquote><p>输入：root &#x3D; []<br>输出：[]</p></blockquote><p><strong>提示</strong>：</p><ul><li>树中节点数目在范围 [0, 2000] 内</li><li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>从结果集来看，该题是<a href="https://zyxelva.github.io/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/">102.二叉树的层序遍历</a>，<a href="https://zyxelva.github.io/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86II/">107.二叉树的层序遍历II</a>的结合，每层既有正序输出，又有逆序输出。只要给定一个标识，奇数层正序输出，而偶数层逆序输出即可解决。</p><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">zigzagLevelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">//利用层序遍历，奇数层从左往右，偶数层从右往左</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == root)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        &#125;<br>        List&lt;List&lt;Integer&gt;&gt; res=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;Integer&gt; tempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;TreeNode&gt; temp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;TreeNode&gt;();<br>        temp.add(root);<br>        temp.add(<span class="hljs-literal">null</span>);<br>        TreeNode node;<br>        <span class="hljs-type">int</span> layer=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(!temp.isEmpty())&#123;<br>            node=temp.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != node)&#123;<br>                <span class="hljs-comment">//奇数层从左往右，偶数层从右往左</span><br>                <span class="hljs-keyword">if</span>(layer%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                    tempList.add(<span class="hljs-number">0</span>, node.val);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    tempList.add(node.val);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=node.left)&#123;<br>                    temp.add(node.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=node.right)&#123;<br>                    temp.add(node.right);<br>                &#125;<br>            &#125; <br>            <span class="hljs-comment">//本层已遍历完毕</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!tempList.isEmpty())&#123;<br>                res.add(tempList);<br>                tempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                temp.add(<span class="hljs-literal">null</span>);<br>                layer++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】107.二叉树的层序遍历II</title>
    <link href="/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86II/"/>
    <url>/2023/04/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86II/</url>
    
    <content type="html"><![CDATA[<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>给你二叉树的根节点 root ，返回其节点值 自底向上的层序遍历 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）<br>示例 1：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/956745c1eb8e7500919a008256ec9311.jpeg#pic_center" alt="图1"></p><blockquote><p>输入：root &#x3D; [3,9,20,null,null,15,7]<br>输出：[[15,7],[9,20],[3]]</p></blockquote><p>示例 2：</p><blockquote><p>输入：root &#x3D; [1]<br>输出：[[1]]</p></blockquote><p>示例 3：</p><blockquote><p>输入：root &#x3D; []<br>输出：[]</p></blockquote><p><strong>提示</strong>：</p><ul><li>树中节点数目在范围 [0, 2000] 内</li><li>-1000 &lt;&#x3D; Node.val &lt;&#x3D; 1000</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>其实与<a href="https://zyxelva.github.io/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/">【LeetCode】102.二叉树的层序遍历</a>广度优先的思路没啥大的区别，从结果来看，就是结果集逆序输出，只要我们在遍历每层完成后，将临时结果集按照头插法插入结果集即可。可以利用List.add(index,value)的方法完成头插法。</p><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrderBottom</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-comment">//分层遍历，利用队列思想，头插法</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == root)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        &#125;<br>        <span class="hljs-comment">//结果集</span><br>        List&lt;List&lt;Integer&gt;&gt; res=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//每层的结果集</span><br>        List&lt;Integer&gt; tempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;TreeNode&gt; temp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;TreeNode&gt;();<br>        <span class="hljs-comment">//根节点入队</span><br>        temp.add(root);<br>        temp.add(<span class="hljs-literal">null</span>);<br>        TreeNode node;<br>        <span class="hljs-keyword">while</span>(!temp.isEmpty())&#123;<br>            node=temp.remove(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != node)&#123;<br>                tempList.add(node.val);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=node.left)&#123;<br>                    temp.add(node.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span>!=node.right)&#123;<br>                    temp.add(node.right);<br>                &#125;<br>            &#125; <br>            <span class="hljs-comment">//本层已遍历完毕</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!tempList.isEmpty())&#123;<br>                <span class="hljs-comment">//头插法（与102不同的地方）</span><br>                res.add(<span class="hljs-number">0</span>, tempList);<br>                tempList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                temp.add(<span class="hljs-literal">null</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
      <tag>Java</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】145.二叉树的后续遍历</title>
    <link href="/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>给你一棵二叉树的根节点 root ，返回其节点值的 <strong>后序</strong> 遍历 。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/b17249866b98973447035d4bf6648b45.jpeg#pic_center" alt="图1"></p><blockquote><p>输入：root &#x3D; [1,null,2,3]<br>输出：[3,2,1]</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><blockquote><p>输入：root &#x3D; []<br>输出：[]</p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h2><blockquote><p>输入：root &#x3D; [1]<br>输出：[1]</p></blockquote><p><strong>提示</strong>：</p><ul><li>树中节点的数目在范围 [0, 100] 内</li><li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>二叉树的后序遍历规则：左-右-根，解题思路其实和前面两篇<a href="https://zyxelva.github.io/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/">二叉树的前序遍历</a>、<a href="https://zyxelva.github.io/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/">二叉树的中序遍历</a>差不太多.</p><h2 id="2-1-递归"><a href="#2-1-递归" class="headerlink" title="2.1 递归"></a>2.1 递归</h2><p>定义函数 postOrderTraversal(root)为遍历root节点。则调用顺序为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">postOrderTraversal(root.left);<br>postOrderTraversal(root.right);<br>root.val;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中 n 是二叉搜索树的节点数。每一个节点恰好被遍历一次。</p></li><li><p>空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为 O(n)。</p></li></ul><h2 id="2-2-迭代"><a href="#2-2-迭代" class="headerlink" title="2.2 迭代"></a>2.2 迭代</h2><ol><li>遍历root<br><img src="https://img-blog.csdnimg.cn/img_convert/7af3c2bb2c4365ed4c37aefa8a4a3c6e.png#pic_center" alt="图2"></li><li>root入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/9070a7206c86a1ea612fc04ec2f71a00.png#pic_center" alt="图3"><br>3）root.left入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/857102064a004707e583721556231ba5.png#pic_center" alt="图4"><br>4）root.left再无左子树了，左子树根节点出栈，遍历，并标记当前出栈的节点为已访问过，否则遍历、入栈root.right<br><img src="https://img-blog.csdnimg.cn/img_convert/f002bede3c25ca19cb98e36727b302aa.png#pic_center" alt="图5"><br><img src="https://img-blog.csdnimg.cn/img_convert/1372fe88616786229ad090b22fbd30cf.png#pic_center" alt="图6"><br><img src="https://img-blog.csdnimg.cn/img_convert/b033abfd3c38a61cf2febbc3cabb69ec.png#pic_center" alt="图7"><br><img src="https://img-blog.csdnimg.cn/img_convert/765e04b0d1cda730a3ba05243a079ef7.png#pic_center" alt="图8"></li></ol><p>5）同理，先把4所有左节点入栈，到达最左节点后，出栈，遍历val，标记当前出栈的节点为已访问过，遍历root.right，出栈root.right，root.<br><img src="https://img-blog.csdnimg.cn/img_convert/37c2e0b67765c6b6a219cf3e21864db2.png#pic_center" alt="图9"><br>5出栈<br><img src="https://img-blog.csdnimg.cn/img_convert/349c04a123e6d5fe20da5a184eb3cb9b.png#pic_center" alt="图10"><br><img src="https://img-blog.csdnimg.cn/img_convert/611d2d7e7ffe0f43fe396655e31a4fff.png#pic_center" alt="图11"><br>4出栈，但4的右节点存在，入栈4.right<br><img src="https://img-blog.csdnimg.cn/img_convert/733a9e18379af93d68e5173774b2d1f2.png#pic_center" alt="图12"><br><img src="https://img-blog.csdnimg.cn/img_convert/022d50585c4aaafd920d3a590c48ea3f.png#pic_center" alt="图13"><br><img src="https://img-blog.csdnimg.cn/img_convert/701a24fb73d25b6e2fed1a31317d31ca.png#pic_center" alt="图14"><br>7出栈，遍历，依次出栈4，3，遍历完毕<br><img src="https://img-blog.csdnimg.cn/img_convert/ddee700bc6ee3175f2c8007270d340ec.png#pic_center" alt="图15"><br><img src="https://img-blog.csdnimg.cn/img_convert/ffb6ce833111af31275a768dc5888df1.png#pic_center" alt="图16"><br><img src="https://img-blog.csdnimg.cn/img_convert/f89ee6166faf12b4f89d048abfc08569.png#pic_center" alt="图17"><br><img src="https://img-blog.csdnimg.cn/img_convert/885f14118fa6d9c7801c914926e1c5b3.png#pic_center" alt="图18"><br><img src="https://img-blog.csdnimg.cn/img_convert/9deb56a376dec731acd2e6cf3cb4c3d0.png#pic_center" alt="图19"><br><img src="https://img-blog.csdnimg.cn/img_convert/bd7589948385a47db4365d8182abd12d.png#pic_center" alt="图20"><br><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中 n 是二叉搜索树的节点数。每一个节点恰好被遍历一次。</p></li><li><p>空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为 O(n)。</p></li></ul><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-comment">//迭代</span><br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">null</span> != current || !stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">null</span> != current) &#123;<br>                stack.push(current);<br>                current = current.left;<br>            &#125;<br>            <span class="hljs-comment">//获取当前栈顶节点</span><br>            current = stack.peek();<br>            <span class="hljs-comment">//右节点为空，或者已经访问过，则打印，并标记当前出栈的节点为已访问过</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == current.right || prev == current.right) &#123;<br>                res.add(current.val);<br>                prev = current;<br>                stack.pop();<br>                current = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                current = current.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-comment">//递归</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] postorderTraversal2 (TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        postorderTraversal2(list, root);<br>        <span class="hljs-keyword">return</span> list.stream().mapToInt(Integer::valueOf).toArray();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postorderTraversal2</span> <span class="hljs-params">(List&lt;Integer&gt; list, TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        postorderTraversal2(list, root.left);<br>        postorderTraversal2(list, root.right);<br>        list.add(root.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】94.二叉树的中序遍历</title>
    <link href="/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>给定一个二叉树的根节点 root ，返回 它的 <strong>中序</strong> 遍历 。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/7c55ac8a6fe7df8e5a4939e503566cb5.jpeg#pic_center" alt="图1"></p><blockquote><p>输入：root &#x3D; [1,null,2,3]<br>输出：[1,3,2]</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><blockquote><p>输入：root &#x3D; []<br>输出：[]</p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h2><blockquote><p>输入：root &#x3D; [1]<br>输出：[1]</p></blockquote><p><strong>提示</strong>：</p><ul><li>树中节点数目在范围 [0, 100] 内</li><li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><h2 id="2-1-递归"><a href="#2-1-递归" class="headerlink" title="2.1 递归"></a>2.1 递归</h2><p>类似<a href="https://zyxelva.github.io/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/">二叉树的前序遍历</a>，中序遍历规则为 左-根-右，只要对前序遍历-递归稍作调整，即可实现；</p><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中 n 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</p></li><li><p>空间复杂度：O(n)。空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n) 的级别。</p></li></ul><h2 id="2-2-迭代（栈）"><a href="#2-2-迭代（栈）" class="headerlink" title="2.2 迭代（栈）"></a>2.2 迭代（栈）</h2><p>若利用栈（迭代思想），则需要调整下入栈顺序，遍历顺序<br>1）先遍历根节点，入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/346ead11b93d1e268442d3268d22c544.png#pic_center" alt="图2"><br>2）循环遍历左子树<br><img src="https://img-blog.csdnimg.cn/img_convert/c423efbaa00943b29c58b1a55e20e802.png#pic_center" alt="图3"><br><img src="https://img-blog.csdnimg.cn/img_convert/795f1e51a84546e874987a7ac8425e7f.png#pic_center" alt="图4"><br>3）到达最左边，出栈，遍历该节点右子树，入栈，没有的话，再出栈该节点的根节点，比如目前节点是4，右子树没有了，出栈根节点2<br><img src="https://img-blog.csdnimg.cn/img_convert/37ff491c7c271fb4f326cc57a74f4122.png#pic_center" alt="图5"><br><img src="https://img-blog.csdnimg.cn/img_convert/7aa96355593a980611f6c2298e71009b.png#pic_center" alt="图6"><br><img src="https://img-blog.csdnimg.cn/img_convert/431308dd45151de979645577be90e040.png#pic_center" alt="图7"><br><img src="https://img-blog.csdnimg.cn/img_convert/f62bc4615e0da03a3e45d9a64acd158b.png#pic_center" alt="图8"></p><p>4）根节点的左子树遍历完毕，开始遍历1的右子树，先出栈根节点1，同理遍历右子树<br><img src="https://img-blog.csdnimg.cn/img_convert/75966ba0cf835e89054d0fd5c4824a56.png#pic_center" alt="图9"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b28df401f758e0b0c558c52f5ef1b08c.png#pic_center" alt="图10"><br><img src="https://img-blog.csdnimg.cn/img_convert/ad63fdcac27c54c96ad5c202f804e81f.png#pic_center" alt="图11"><br><img src="https://img-blog.csdnimg.cn/img_convert/6dfe1efa71dc1da0ff6b115bbeb46f2f.png#pic_center" alt="图12"><br><img src="https://img-blog.csdnimg.cn/img_convert/db58b8ed3cdde4808ecc14551cd02fd5.png#pic_center" alt="图13"><br><img src="https://img-blog.csdnimg.cn/img_convert/ac29b2347b8098dc63cd4be6e7496bc2.png#pic_center" alt="图14"><br><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中 n 为二叉树节点的个数。二叉树的遍历中每个节点会被访问一次且只会被访问一次。</p></li><li><p>空间复杂度：O(n)。空间复杂度取决于栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n) 的级别。</p></li></ul><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *   int val = 0;</span><br><span class="hljs-comment"> *   TreeNode left = null;</span><br><span class="hljs-comment"> *   TreeNode right = null;</span><br><span class="hljs-comment"> *   public TreeNode(int val) &#123;</span><br><span class="hljs-comment"> *     this.val = val;</span><br><span class="hljs-comment"> *   &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 递归算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int整型一维数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] inorderTraversal2 (TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        inorderTraversal2(list, root);<br>        <span class="hljs-keyword">return</span> list.stream().mapToInt(Integer::valueOf).toArray();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inorderTraversal2</span> <span class="hljs-params">(List&lt;Integer&gt; list, TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inorderTraversal2(list, root.left);<br>        list.add(root.val);<br>        inorderTraversal2(list, root.right);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    非递归算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] inorderTraversal (TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>            <span class="hljs-comment">//把左节点所有左节点入栈</span><br>            <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(cur);<br>                cur = cur.left;<br>            &#125;<br>            <span class="hljs-comment">//出栈</span><br>            top = stack.pop();<br>            list.add(top.val);<br>            cur = top.right;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> list.size();<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            arr[i] = list.get(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】102.二叉树的层序遍历</title>
    <link href="/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/2e1724d19c6520ecce7f331873f7bee9.jpeg#pic_center" alt="图1"></p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><blockquote><p>输入：root &#x3D; [3,9,20,null,null,15,7]<br>输出：[[3],[9,20],[15,7]]</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><blockquote><p>输入：root &#x3D; [1]<br>输出：[[1]]</p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h2><blockquote><p>输入：root &#x3D; []<br>输出：[]</p></blockquote><p><strong>提示</strong>：</p><ul><li>树中节点数目在范围 [0, 2000] 内</li><li>-1000 &lt;&#x3D; Node.val &lt;&#x3D; 1000</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><h2 id="2-1-队列"><a href="#2-1-队列" class="headerlink" title="2.1 队列"></a>2.1 队列</h2><p>二叉树每层的遍历符合队列的特性，必须FIFO(first in first out)，再遍历每层完成后，可以给定一个标记或者层数，表示该层已经遍历完毕，可以将此时的该层遍历结果输出。伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义队列</span><br>Queue q;<br><span class="hljs-comment">//结果集</span><br>List res;<br><span class="hljs-comment">//root 入队</span><br>q.add(root);<br><span class="hljs-comment">//给定一个标识，标记第一层遍历的结尾</span><br>q.add(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">while</span>(q不为空)&#123;<br><span class="hljs-comment">//出队</span><br>temp=q.peek();<br><span class="hljs-comment">//不是标识的话，入队root.left、root.right</span><br><span class="hljs-keyword">if</span>(temp不为<span class="hljs-literal">null</span>)&#123;<br>res.add(temp.val);<br><span class="hljs-keyword">if</span>(temp.left不为<span class="hljs-literal">null</span>)&#123;<br>q.add(temp.left);<br>&#125;<br><span class="hljs-keyword">if</span>(temp.right不为<span class="hljs-literal">null</span>)&#123;<br>q.add(temp.right);<br>&#125;<br>&#125;<br><span class="hljs-comment">//否则，该层遍历完毕</span><br><span class="hljs-keyword">else</span> &#123;<br>q.add(<span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/774fe28d36b44dfdda1b8167197e72e6.gif#pic_center" alt="图2"><br><strong>复杂度分析</strong>：</p><ul><li>时间复杂度：O(n)，其中n为二叉树的节点数，每个节点访问一次</li><li>空间复杂度：O(n)，队列的空间为二叉树的一层的节点数，最坏情况二叉树的一层为O(n)级</li></ul><h2 id="2-2-递归"><a href="#2-2-递归" class="headerlink" title="2.2 递归"></a>2.2 递归</h2><p>根据二叉树的定义，不难看出，每个节点都有类似的性质。当遍历发生时，对于其左右子树同样适用相同的规则，非常适合递归。可以借鉴之前对于二叉树的前中后序遍历，既然可以用递归解决，那层次遍历也未尝不可。同样可以运用标记的思想，对于同一层，可以标记为相同的深度来进行遍历。伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> depth)</span>;<br><br><span class="hljs-comment">//计入子节点，则深度depth+1</span><br><span class="hljs-comment">//递归左右时深度记得加1</span><br>traverse(root.left, depth + <span class="hljs-number">1</span>); <br>traverse(root.right, depth + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//每个节点值放入对应的二维数组相应行</span><br>res[depth - <span class="hljs-number">1</span>].push_back(root-&gt;val);<br><br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)，n为节点数量，DFS对每个节点访问一次，因此递归调用n次，每次调用执行常数次操作，时间复杂度O(n)。</li><li>空间复杂度：O(n)，空间复杂度在于递归调用深度和每次递归调用辅助空间，辅助空间为常数级，与节点深度相关，当节点深度为n时最大，为O(n)。</li></ul><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *   int val = 0;</span><br><span class="hljs-comment"> *   TreeNode left = null;</span><br><span class="hljs-comment"> *   TreeNode right = null;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 利用队列的性质</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int整型ArrayList&lt;ArrayList&lt;&gt;&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span> <span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-comment">//结果</span><br>        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//每层临时结果</span><br>        ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        TreeNode node;<br>        <span class="hljs-comment">//队列</span><br>        LinkedList&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        list.add(root);<br>        <span class="hljs-comment">//给定个 层标识</span><br>        list.add(<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//遍历队列</span><br>        <span class="hljs-keyword">while</span> (!list.isEmpty()) &#123;<br>            node = list.removeFirst();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != node) &#123;<br>                temp.add(node.val);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != node.left) &#123;<br>                    list.add(node.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != node.right) &#123;<br>                    list.add(node.right);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//为null节点，说明这一层已经遍历完成</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//这里一定要判断下，如果为空，表明二叉树已经遍历完成了</span><br>                <span class="hljs-keyword">if</span> (!temp.isEmpty()) &#123;<br>                    res.add(temp);<br>                    temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>                    list.add(<span class="hljs-literal">null</span>);<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><span class="hljs-comment">//记录输出</span><br>    ArrayList&lt;ArrayList&lt;Integer&gt; &gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    <br><span class="hljs-comment">//递归</span><br><span class="hljs-keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span> <span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)<br>            <span class="hljs-comment">//如果是空，则直接返回</span><br>            <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-comment">//递归层次遍历</span><br>        traverse(root, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-comment">//临时结果集</span><br>    ArrayList&lt;Integer&gt; row;<br>    <br><span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> depth)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//新的一层: 对于二维res来说，将根视为第0层，树的深度正好等于一维res的个数</span><br>            <span class="hljs-keyword">if</span>(res.size() == depth)&#123; <br>                row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                res.add(row);<br>            <span class="hljs-comment">//读取该层的一维数组，将元素加入末尾</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                row = res.get(depth); <br>            &#125;<br>            row.add(root.val);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//递归左右时深度记得加1</span><br>        traverse(root.left, depth + <span class="hljs-number">1</span>);<br>        traverse(root.right, depth + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【LeetCode】144.二叉树的前序遍历</title>
    <link href="/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2023/04/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">给你二叉树的根节点<span class="hljs-built_in"> root</span> ，返回它节点值的 前序 遍历。<br></code></pre></td></tr></table></figure><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/bfcfd742f58b7f629df27b4bf8a169a9.jpeg#pic_center" alt="图1"></p><blockquote><p>输入：root &#x3D; [1,null,2,3]<br>输出：[1,2,3]</p></blockquote><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><blockquote><p>输入：root &#x3D; []<br>输出：[]</p></blockquote><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h2><blockquote><p>输入：root &#x3D; [1]<br>输出：[1]</p></blockquote><h2 id="示例-4"><a href="#示例-4" class="headerlink" title="示例 4"></a>示例 4</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/055d4e3cd757f49afe71b8e1467d480a.jpeg#pic_center" alt="图2"></p><blockquote><p>输入：root &#x3D; [1,2]<br>输出：[1,2]</p></blockquote><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例 5"></a>示例 5</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/1e3a847f0b72e64b899dbeb0dcbca616.jpeg#pic_center" alt="图3"></p><blockquote><p>输入：root &#x3D; [1,null,2]<br>输出：[1,2]</p></blockquote><p><strong>提示</strong>：</p><ul><li>树中节点数目在范围 [0, 100] 内</li><li>-100 &lt;&#x3D; Node.val &lt;&#x3D; 100</li></ul><h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><h2 id="2-1-递归"><a href="#2-1-递归" class="headerlink" title="2.1 递归"></a>2.1 递归</h2><p>中序遍历的规则是 根-左-右，然后访问左子树、右子树时同样按照此规则遍历，非常容易通过递归实现，按照规则，代码非常容易写出来。定义 <strong>preorderTraversal(root)</strong> 为递归遍历函数方法，root 为根节点。伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">root.val;<br>preorderTraversal(root.left);<br>preorderTraversal(root.right);<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中 n 是二叉树的节点数。每一个节点恰好被遍历一次。</p></li><li><p>空间复杂度：O(n)，为递归过程中栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为 O(n)。</p></li></ul><h2 id="2-2-迭代"><a href="#2-2-迭代" class="headerlink" title="2.2 迭代"></a>2.2 迭代</h2><p>显示利用栈结构，遍历二叉树。<br>引用LeetCode动态图解迭代过程：<br>1）访问根节点<br><img src="https://img-blog.csdnimg.cn/img_convert/9d2a4485420c7a95799a09999b81d662.png#pic_center" alt="图4"><br>2）根节点入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/64301bc1906294b4853a32161890f3ec.png#pic_center" alt="图5"><br>3）左子树根节点遍历、入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/625bc2dd91f7e489d64311098b60599c.png#pic_center" alt="图6"><br>4）左子树根节点出栈，遍历其左右子节点<br><img src="https://img-blog.csdnimg.cn/img_convert/1795695bfe91736dd9daba150dc75b02.png#pic_center" alt="图7"><br>5）左根节点左子树不存在，遍历其右子树4<br><img src="https://img-blog.csdnimg.cn/img_convert/053fb2ab6e498be02df4e0b7c1e8bd78.png#pic_center" alt="图8"><br>6）左子树遍历完毕，遍历根节点右子树<br><img src="https://img-blog.csdnimg.cn/img_convert/92ba07a2ab80979a6adcbb932f43c0ad.png#pic_center" alt="图9"><br>7）遍历右子树根节点，根节点出栈<br><img src="https://img-blog.csdnimg.cn/img_convert/d19f60849640fb1625a0424b3cbde631.png#pic_center" alt="图10"><br>8）右子树根节点入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/2db7363f3e0366a1b2242fb703c95751.png#pic_center" alt="图11"></p><p>9）右子树左节点遍历，入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/0df77d13242bf0d1028476a613d15084.png#pic_center" alt="图12"></p><p>10）右子树左节点遍历完毕，该节点出栈<br><img src="https://img-blog.csdnimg.cn/img_convert/3a874f3193e082298063797fc8fba000.png#pic_center" alt="图13"><br>11）遍历右子树右节点，右子树根节点出栈<br><img src="https://img-blog.csdnimg.cn/img_convert/62cd727620a3733c5b93de45ef8c8d83.png#pic_center" alt="图14"><br>12）右子树右节点遍历，入栈<br><img src="https://img-blog.csdnimg.cn/img_convert/44473bed64019699f1a718508dbf4a24.png#pic_center" alt="图15"><br>13）右子树遍历完毕，出栈<br><img src="https://img-blog.csdnimg.cn/img_convert/87b30e5ca23edf3bee8fe942d99b7e4b.png#pic_center" alt="图16"><br>14）遍历完毕<br><img src="https://img-blog.csdnimg.cn/img_convert/c2cee3c4c3edf74912ccc14b9dbba9af.png#pic_center" alt="图17"><br><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，其中 n 是二叉树的节点数。每一个节点恰好被遍历一次。</p></li><li><p>空间复杂度：O(n)，为迭代过程中显式栈的开销，平均情况下为 O(log⁡n)，最坏情况下树呈现链状，为 O(n)。</p></li></ul><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int整型一维数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] preorderTraversal (TreeNode root) &#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        preorderTraversal2(list, root);<br>        <span class="hljs-keyword">return</span> list.stream().mapToInt(Integer::valueOf).toArray();<br>    &#125;<br> <br> <span class="hljs-comment">//递归方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preorderTraversal2</span> <span class="hljs-params">(List&lt;Integer&gt; list, TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        list.add(root.val);<br>        preorderTraversal2(list, root.left);<br>        preorderTraversal2(list, root.right);<br>    &#125;<br><br><span class="hljs-comment">//迭代，栈思想</span><br><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == root) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.add(root);<br>        TreeNode p;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            p = stack.pop();<br>            res.add(p.val);<br>            <span class="hljs-comment">//先把右节点入栈</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != p.right) &#123;<br>                stack.add(p.right);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != p.left) &#123;<br>                stack.add(p.left);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>数据结构</tag>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/28/hello-world/"/>
    <url>/2023/04/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
